
/* dk replaced all $ with jQuery in order to manage compatibility */

// Generated by CoffeeScript 1.9.1
var JT, JTCurve, JTMatrix, JTSmoothSurface, JTStateHash, ViewController,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

String.prototype.to_params = function() {
  return this.split("&").reduce((function(a, x) {
    var h;
    h = x.split("=");
    a[h[0]] = h[1];
    return a;
  }), {});
};

ViewController = (function() {
  function ViewController() {
    this.bind_events = bind(this.bind_events, this);
    this.enable_scroll = bind(this.enable_scroll, this);
    this.disable_scroll = bind(this.disable_scroll, this);
    this.hamburger_menu_clicked = bind(this.hamburger_menu_clicked, this);
    this.close_hamburger_menu = bind(this.close_hamburger_menu, this);
    this.open_hamburger_menu = bind(this.open_hamburger_menu, this);
    this.setup_data = bind(this.setup_data, this);
    var params, search;
    this.network_ip = window.location.hostname;
    this.development = /^192\.168\./.test(this.network_ip) || /^localhost/.test(this.network_ip) || /^lvh.me/.test(this.network_ip);
    search = String(window.location.search);
    params = search.substring(1).to_params();
    this.ref_id = params['r'] ? params['r'] : "none";
    this.setup_data();
    this.bind_events();

    // jQuery('a').on('click touchend', function() { 
    //     var link = jQuery(this).attr('href');   
    //     window.open(link, "_self"); // opens in new window as requested 

    //     return false; // prevent anchor click    
    // });   
  }

  ViewController.prototype.setup_data = function() {
    var i, k, smooth_item;
    this.MOBILE_STATE = 0;
    this.TABLET_STATE = 1;
    this.DESKTOP_STATE = 2;
    this.TOUCH_STATE = 0;
    this.MOUSE_STATE = 1;
    this.window = jQuery(window);
    this.wrapper = jQuery('#main-wrapper');
    this.wrapper.scrollTop(0);
    this.nav_bar_wrapper2 = jQuery("#nav-bar-wrapper2");
    this.hamburger_menu = jQuery("#hamburger-menu-container");
    this.hamburger_menu_smooth = new JTSmoothSurface({
      element_id: "main-wrapper"
    });
    this.mobile_nav = jQuery("#mobile-nav");
    this.mobile_nav_smooth_surfaces = [];
    for (i = k = 0; k <= 5; i = ++k) {
      smooth_item = new JTSmoothSurface({
        element_id: "mobile-nav-button" + i
      });
      smooth_item.resize({
        tx: 300
      });
      this.mobile_nav_smooth_surfaces.push(smooth_item);
    }
    this.launch_play_button = jQuery("#launch_video_play_button");
    return this.data = {
      'section-2-text-offset': 500,
      'has-scrolled': true,
      'demo-video-playing': false,
      'lightbox-open': false,
      'hamburger-menu-open': false
    };
  };

  ViewController.prototype.open_hamburger_menu = function() {
    var half_window, i, k, ref, results;
    this.data['window-width'] = this.window.width();
    half_window = this.data['window-width'] / 2;

    this.hamburger_menu_smooth.pause();
    this.hamburger_menu_smooth.animate_abs({
      tx: -half_window
    }, 1200, JTCurve.damp);
    results = [];
    for (i = k = 0, ref = this.mobile_nav_smooth_surfaces.length - 1; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
      results.push((function(_this) {
        return function(i) {
          var animate_item;
          animate_item = function() {
            _this.mobile_nav_smooth_surfaces[i].pause();
            return _this.mobile_nav_smooth_surfaces[i].animate_abs({
              tx: 20
            }, 1200, JTCurve.damp);
          };
          return setTimeout(animate_item, i * 50);
        };
      })(this)(i));
    }
    return results;
  };

  ViewController.prototype.close_hamburger_menu = function() {
    var i, k, ref, results;

    this.hamburger_menu_smooth.pause();
    this.hamburger_menu_smooth.animate_abs({
      tx: 0
    }, 1200, JTCurve.damp);
    results = [];
    for (i = k = 0, ref = this.mobile_nav_smooth_surfaces.length - 1; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
      this.mobile_nav_smooth_surfaces[i].pause();
      results.push(this.mobile_nav_smooth_surfaces[i].animate_abs({
        tx: 300
      }, 1200, JTCurve.damp));
    }
    return results;
  };

  ViewController.prototype.hamburger_menu_clicked = function(evt) {
    var is_open;
    evt.preventDefault();
    evt.stopPropagation();
    
    is_open = this.data['hamburger-menu-open'];
    if (is_open) {
      this.close_hamburger_menu();
      this.enable_scroll();
      setTimeout(((function(_this) {
        return function() {
          if (!_this.data['hamburger-menu-open']) {
            return _this.mobile_nav.hide();
          }
        };
      })(this)), 500);
    } else {
      this.disable_scroll();
      this.mobile_nav.show();
      this.open_hamburger_menu();
    }
    return this.data['hamburger-menu-open'] = !is_open;
  };

  ViewController.prototype.disable_scroll = function() {
    this.window.bind("mousewheel", (function(_this) {
      return function(evt) {
        evt.stopPropagation();
        evt.preventDefault();
        return false;
      };
    })(this));
    this.window.bind("touchstart", (function(_this) {
      return function(evt) {
        return evt.preventDefault();
      };
    })(this));
    this.window.bind("touchmove", (function(_this) {
      return function(evt) {
        evt.stopPropagation();
        evt.preventDefault();
        return false;
      };
    })(this));
    return this.window.bind("touchend", (function(_this) {
      return function(evt) {
        evt.stopPropagation();
        evt.preventDefault(); 
        return false;
      };
    })(this));
  };

  ViewController.prototype.enable_scroll = function(with_touch) {
    this.window.unbind("mousewheel");
    this.window.unbind("touchstart");
    this.window.unbind("touchmove");
    this.window.unbind("touchend");
    if (with_touch) {
      return this.wrapper.addClass('wrapper-scroll-x-hidden');
    }
  };

  ViewController.prototype.bind_events = function() {
    // this.window.bind("touchmove", (function(_this) {
    //   return function(evt) {
    //     if (_this.wrapper.scrollTop() > 0) {
    //       return false;
    //     }
    //   };
    // })(this));
    // this.wrapper.bind("scroll", this.trigger_scroll);
    // this.wrapper.bind("touchstart", this.trigger_scroll);
    // this.window.bind("resize", this.resize);
    this.hamburger_menu.bind("click", this.hamburger_menu_clicked);
    return this.hamburger_menu.bind("touchend", this.hamburger_menu_clicked);
  };

  return ViewController;

})();

JTCurve = (function() {
  function JTCurve() {}

  JTCurve.elastic = function(t, b, c, d) {
    var a, p, s;
    s = 0.01;
    p = 0;
    a = c;
    if (t === 0) {
      return b;
    }
    if ((t /= d) === 1) {
      return b + c;
    }
    if (!p) {
      p = d * .3;
    }
    if (a < Math.abs(c)) {
      a = c;
      s = p / 4;
    } else {
      s = p / (2 * Math.PI) * Math.asin(c / a);
    }
    return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
  };

  JTCurve.elastic2 = function(t, b, c, d) {
    var tc, ts;
    ts = (t /= d) * t;
    tc = ts * t;
    return b + c * (-8.1525 * tc * ts + 28.5075 * ts * ts + -35.105 * tc + 16 * ts + -0.25 * t);
  };

  JTCurve.easeOutBounce = function(t, b, c, d) {
    if ((t /= d) < (1 / 2.75)) {
      return c * (7.5625 * t * t) + b;
    } else if (t < (2 / 2.75)) {
      return c * (7.5625 * (t -= 1.5 / 2.75) * t + .75) + b;
    } else if (t < (2.5 / 2.75)) {
      return c * (7.5625 * (t -= 2.25 / 2.75) * t + .9375) + b;
    } else {
      return c * (7.5625 * (t -= 2.625 / 2.75) * t + .984375) + b;
    }
  };

  JTCurve.backInOut = function(time, begin, change, duration, overshoot) {
    if (overshoot == null) {
      overshoot = 1.70158;
    }
    if ((time = time / (duration / 2)) < 1) {
      return change / 2 * (time * time * (((overshoot *= 1.525) + 1) * time - overshoot)) + begin;
    } else {
      return change / 2 * ((time -= 2) * time * (((overshoot *= 1.525) + 1) * time + overshoot) + 2) + begin;
    }
  };

  JTCurve.accel = function(time, begin, change, duration) {
    var a;
    a = 4;
    if ((time = time / duration) < 0.5) {
      return (0.5 * a * time * time) + begin;
    } else {
      time -= 0.5;
      return (0.5 * (-a) * time * time) + (a * 0.5 * time) + 0.5 + begin;
    }
  };

  JTCurve.damp = function(time, begin, change, duration) {
    var l1, l2;
    time = time * 1.0 / duration * 4;
    l1 = -3;
    l2 = 3;
    return change - (Math.exp(l1 * time) * Math.cos(l2 * time) + 1.48 * Math.exp(l1 * time) * Math.sin(l2 * time)) + begin;
  };

  JTCurve.damp2 = function(time, begin, change, duration) {
    var l1, l2;
    time = time * 1.0 / duration * 4;
    l1 = -3;
    l2 = 3;
    return change - (Math.exp(l1 * time) * Math.cos(l2 * time) + 1.48 * Math.exp(l1 * time) * Math.sin(l2 * time)) + begin;
  };

  return JTCurve;

})();

window.JTCurve = JTCurve;

JTMatrix = (function() {
  function JTMatrix(matrix) {
    this.print = bind(this.print, this);
    this.css = bind(this.css, this);
    this.scale = bind(this.scale, this);
    this.rotate = bind(this.rotate, this);
    this.transform = bind(this.transform, this);
    this.rnd = bind(this.rnd, this);
    this.multiply = bind(this.multiply, this);
    this.make_identity = bind(this.make_identity, this);
    this.make_matrix = bind(this.make_matrix, this);
    if (jQuery.isArray(matrix)) {
      this.make_matrix(matrix);
    } else {
      this.make_identity(matrix);
    }
  }

  JTMatrix.prototype.make_matrix = function(matrix) {
    var column, i, j, k, l, len, len1, results, row;
    this.rows = [];
    this.columns = [];
    i = 0;
    results = [];
    for (k = 0, len = matrix.length; k < len; k++) {
      row = matrix[k];
      if (jQuery.isArray(row)) {
        this.rows.push(row);
        j = 0;
        for (l = 0, len1 = row.length; l < len1; l++) {
          column = row[l];
          if (!this.columns[j]) {
            this.columns.push([]);
          }
          this.columns[j][i] = column;
          j += 1;
        }
        results.push(i += 1);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  JTMatrix.prototype.make_identity = function(n) {
    var k, matrix, ref, results;
    this.rows = [];
    this.columns = [];
    matrix = (function() {
      results = [];
      for (var k = 0, ref = n - 1; 0 <= ref ? k <= ref : k >= ref; 0 <= ref ? k++ : k--){ results.push(k); }
      return results;
    }).apply(this).reduce(((function(_this) {
      return function(acc1, x) {
        var k, ref, results;
        acc1.push((function() {
          results = [];
          for (var k = 0, ref = n - 1; 0 <= ref ? k <= ref : k >= ref; 0 <= ref ? k++ : k--){ results.push(k); }
          return results;
        }).apply(this).reduce((function(acc2, y) {
          acc2.push(x === y ? 1 : 0);
          return acc2;
        }), []));
        return acc1;
      };
    })(this)), []);
    return this.make_matrix(matrix);
  };

  JTMatrix.prototype.multiply = function(b) {
    var column, i, j, k, l, m, o, output_matrix, ref, ref1, ref2, ref3, results, results1, row;
    output_matrix = (function() {
      results = [];
      for (var k = 0, ref = this.rows.length - 1; 0 <= ref ? k <= ref : k >= ref; 0 <= ref ? k++ : k--){ results.push(k); }
      return results;
    }).apply(this).reduce(((function(_this) {
      return function(acc, x) {
        acc.push([]);
        return acc;
      };
    })(this)), []);
    for (i = l = 0, ref1 = this.rows.length - 1; 0 <= ref1 ? l <= ref1 : l >= ref1; i = 0 <= ref1 ? ++l : --l) {
      row = this.rows[i];
      for (j = m = 0, ref2 = b.columns.length - 1; 0 <= ref2 ? m <= ref2 : m >= ref2; j = 0 <= ref2 ? ++m : --m) {
        column = b.columns[j];
        output_matrix[i][j] = (function() {
          results1 = [];
          for (var o = 0, ref3 = row.length - 1; 0 <= ref3 ? o <= ref3 : o >= ref3; 0 <= ref3 ? o++ : o--){ results1.push(o); }
          return results1;
        }).apply(this).reduce(((function(_this) {
          return function(acc, x) {
            return acc += row[x] * column[x];
          };
        })(this)), 0);
      }
    }
    return output_matrix;
  };

  JTMatrix.prototype.rnd = function(n) {
    n *= 1000000.0;
    n = Math.round(n);
    n /= 1000000.0;
    return n;
  };

  JTMatrix.prototype.transform = function(x, y, z) {
    var matrix, r1, r2, r3, r4;
    r1 = [1, 0, 0, 0];
    r2 = [0, 1, 0, 0];
    r3 = [0, 0, 1, 0];
    r4 = [x, y, z, 1];
    matrix = this.multiply(new JTMatrix([r1, r2, r3, r4]));
    this.make_matrix(matrix);
    return this;
  };

  JTMatrix.prototype.rotate = function(x, y, z) {
    var matrix, r1, r2, r3, r4;
    if (x !== 0) {
      r1 = [1, 0, 0, 0];
      r2 = [0, this.rnd(Math.cos(x * Math.PI / 180.0)), -this.rnd(Math.sin(x * Math.PI / 180.0)), 0];
      r3 = [0, this.rnd(Math.sin(x * Math.PI / 180.0)), this.rnd(Math.cos(x * Math.PI / 180.0)), 0];
      r4 = [0, 0, 0, 1];
      matrix = this.multiply(new JTMatrix([r1, r2, r3, r4]));
      this.make_matrix(matrix);
    }
    if (y !== 0) {
      r1 = [this.rnd(Math.cos(y * Math.PI / 180.0)), 0, this.rnd(Math.sin(y * Math.PI / 180.0)), 0];
      r2 = [0, 1, 0, 0];
      r3 = [-this.rnd(Math.sin(y * Math.PI / 180.0)), 0, this.rnd(Math.cos(y * Math.PI / 180.0)), 0];
      r4 = [0, 0, 0, 1];
      matrix = this.multiply(new JTMatrix([r1, r2, r3, r4]));
      this.make_matrix(matrix);
    }
    if (z !== 0) {
      r1 = [this.rnd(Math.cos(z * Math.PI / 180.0)), -this.rnd(Math.sin(z * Math.PI / 180.0)), 0, 0];
      r2 = [this.rnd(Math.sin(z * Math.PI / 180.0)), this.rnd(Math.cos(z * Math.PI / 180.0)), 0, 0];
      r3 = [0, 0, 1, 0];
      r4 = [0, 0, 0, 1];
      matrix = this.multiply(new JTMatrix([r1, r2, r3, r4]));
      this.make_matrix(matrix);
    }
    return this;
  };

  JTMatrix.prototype.scale = function(x, y, z) {
    var matrix, r1, r2, r3, r4;
    r1 = [x, 0, 0, 0];
    r2 = [0, y, 0, 0];
    r3 = [0, 0, z, 0];
    r4 = [0, 0, 0, 1];
    matrix = this.multiply(new JTMatrix([r1, r2, r3, r4]));
    this.make_matrix(matrix);
    return this;
  };

  JTMatrix.prototype.css = function() {
    return "matrix3d(" + (this.rows.reduce(((function(_this) {
      return function(acc, row) {
        var k, len, x;
        for (k = 0, len = row.length; k < len; k++) {
          x = row[k];
          acc.push(x);
        }
        return acc;
      };
    })(this)), []).join(",")) + ")";
  };

  JTMatrix.prototype.print = function() {
    var k, len, ref, results, row;
    ref = this.rows;
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      row = ref[k];
      results.push(console.log("|" + row.reduce(((function(_this) {
        return function(acc, x) {
          acc += " " + x + " ";
          return acc;
        };
      })(this)), "") + "|"));
    }
    return results;
  };

  return JTMatrix;

})();

window.JTMatrix = JTMatrix;

JTSmoothSurface = (function() {
  function JTSmoothSurface(hash) {
    this.hash = hash;
    this.pause_velocity = bind(this.pause_velocity, this);
    this.next_item_velocity = bind(this.next_item_velocity, this);
    this.animate_velocity_frame = bind(this.animate_velocity_frame, this);
    this.set_limits = bind(this.set_limits, this);
    this.velocity = bind(this.velocity, this);
    this.bind_position_change_function = bind(this.bind_position_change_function, this);
    this.resize_limit = bind(this.resize_limit, this);
    this.pause_size = bind(this.pause_size, this);
    this.next_item_size = bind(this.next_item_size, this);
    this.animate_size_frame = bind(this.animate_size_frame, this);
    this.animate_size = bind(this.animate_size, this);
    this.set_size = bind(this.set_size, this);
    this.get_cached_pos = bind(this.get_cached_pos, this);
    this.cache_positions = bind(this.cache_positions, this);
    this.get_pos = bind(this.get_pos, this);
    this.animate_frame_custom = bind(this.animate_frame_custom, this);
    this.animate_custom = bind(this.animate_custom, this);
    this.animate_frame_abs = bind(this.animate_frame_abs, this);
    this.animate_abs = bind(this.animate_abs, this);
    this.pause = bind(this.pause, this);
    this.next_item_custom = bind(this.next_item_custom, this);
    this.next_item_abs = bind(this.next_item_abs, this);
    this.animate_frame = bind(this.animate_frame, this);
    this.rotate = bind(this.rotate, this);
    this.resize = bind(this.resize, this);
    this.next_item = bind(this.next_item, this);
    this.animate = bind(this.animate, this);
    this.apply_matrix = bind(this.apply_matrix, this);
    this.append_matrix = bind(this.append_matrix, this);
    this.reset = bind(this.reset, this);
    this.set_matrix = bind(this.set_matrix, this);
    if (this.hash) {
      this.elem_id = this.hash['element_id'];
    }
    this.j_elem = jQuery("#" + this.elem_id);
    this.pos = 0;
    this.matrix = new JTMatrix(4);
    this.saved_poses = {
      tx: 0,
      ty: 0,
      tz: 0,
      rx: 0,
      ry: 0,
      rz: 0,
      sx: 1,
      sy: 1,
      sz: 1
    };
    this.saved_velocities = {
      tx: 0,
      ty: 0,
      tz: 0
    };
    this.current = this.saved_poses;
    this.animating = false;
    this.queue = [];
    this.queue_abs = [];
    this.queue_custom = [];
    this.queue_size = [];
    this.queue_velocities = [];
    this.cache = {};
    this.loop = null;
    this.size_loop = null;
  }

  JTSmoothSurface.prototype.set_matrix = function(matrix) {
    return this.matrix = matrix;
  };

  JTSmoothSurface.prototype.reset = function() {
    this.matrix = new JTMatrix(4);
    return this.set_matrix(this.matrix);
  };

  JTSmoothSurface.prototype.append_matrix = function(matrix) {
    return this.matrix = new JTMatrix(this.matrix.multiply(matrix));
  };

  JTSmoothSurface.prototype.apply_matrix = function() {
    return this.j_elem.css({
      transform: this.matrix.css()
    });
  };

  JTSmoothSurface.prototype.animate = function(positions, duration, animation_function, callback) {
    var key, ref, val;
    if (animation_function == null) {
      animation_function = null;
    }
    if (callback == null) {
      callback = null;
    }
    if (!this.animating) {
      this.animating = true;
      if (callback) {
        this.callback = callback;
      }
      this.pos = 0;
      this.poses = {};
      ref = this.saved_poses;
      for (key in ref) {
        val = ref[key];
        this.poses[key] = positions[key] ? positions[key] : val;
      }
      return requestAnimationFrame((function(_this) {
        return function() {
          return _this.animate_frame(0, duration, animation_function);
        };
      })(this));
    } else {
      return this.queue.push({
        positions: positions,
        duration: duration,
        animation_function: animation_function,
        callback: callback
      });
    }
  };

  JTSmoothSurface.prototype.next_item = function() {
    var params;
    this.animating = false;
    if (this.queue.length > 0) {
      params = this.queue.shift();
      return this.animate(params['positions'], params['duration'], params['animation_function'], params['callback']);
    }
  };

  JTSmoothSurface.prototype.resize = function(positions) {
    var key, pos, ref, ref1, results, transform_matrix, val;
    this.poses = {};
    this.saved_poses = {
      tx: 0,
      ty: 0,
      tz: 0,
      rx: 0,
      ry: 0,
      rz: 0,
      sx: 1,
      sy: 1,
      sz: 1
    };
    ref = this.saved_poses;
    for (key in ref) {
      val = ref[key];
      this.poses[key] = positions[key] || positions[key] === 0 ? positions[key] : val;
    }
    this.current = this.poses;
    transform_matrix = new JTMatrix(4);
    pos = 1;
    transform_matrix.scale(this.saved_poses['sx'] + pos * (this.poses['sx'] - this.saved_poses['sx']), this.saved_poses['sy'] + pos * (this.poses['sy'] - this.saved_poses['sy']), this.saved_poses['sz'] + pos * (this.poses['sz'] - this.saved_poses['sz']));
    transform_matrix.rotate(this.saved_poses['rx'] + pos * this.poses['rx'], this.saved_poses['ry'] + pos * this.poses['ry'], this.saved_poses['rz'] + pos * this.poses['rz']);
    transform_matrix.transform(this.saved_poses['tx'] + pos * this.poses['tx'], this.saved_poses['ty'] + pos * this.poses['ty'], this.saved_poses['tz'] + pos * this.poses['tz']);
    this.set_matrix(transform_matrix);
    this.apply_matrix();
    ref1 = this.poses;
    results = [];
    for (key in ref1) {
      val = ref1[key];
      switch (key) {
        case 'tx':
        case 'ty':
        case 'tz':
          results.push(this.saved_poses[key] = this.saved_poses[key] + val);
          break;
        case 'rx':
        case 'ry':
        case 'rz':
          results.push(this.saved_poses[key] = this.saved_poses[key] + val);
          break;
        case 'sx':
        case 'sy':
        case 'sz':
          results.push(this.saved_poses[key] = val);
          break;
        default:
          results.push(void 0);
      }
    }
    return results;
  };

  JTSmoothSurface.prototype.rotate = function(x, y, z) {
    var matrix;
    matrix = new JTMatrix(this.matrix.multiply(new JTMatrix(4).rotate(x, y, z)));
    return this.set_matrix(matrix);
  };

  JTSmoothSurface.prototype.animate_frame = function(time, duration, animation_function, abs) {
    var b, c, d, key, pos, ref, t, transform_matrix, val;
    if (animation_function == null) {
      animation_function = null;
    }
    if (abs == null) {
      abs = false;
    }
    if (time <= duration) {
      b = 0;
      d = duration;
      c = 1;
      t = time;
      if (animation_function) {
        pos = animation_function(t, b, c, d);
      } else {
        pos = (t /= d / 2) < 1 ? c / 2 * t * t * t + b : c / 2 * ((t -= 2) * t * t + 2) + b;
      }
      pos = Math.round(pos * 100) / 100;
      this.pos = pos;
      transform_matrix = new JTMatrix(4);
      transform_matrix.scale(this.saved_poses['sx'] + pos * (this.poses['sx'] - this.saved_poses['sx']), this.saved_poses['sy'] + pos * (this.poses['sy'] - this.saved_poses['sy']), this.saved_poses['sz'] + pos * (this.poses['sz'] - this.saved_poses['sz']));
      transform_matrix.rotate(this.saved_poses['rx'] + pos * this.poses['rx'], this.saved_poses['ry'] + pos * this.poses['ry'], this.saved_poses['rz'] + pos * this.poses['rz']);
      transform_matrix.transform(this.saved_poses['tx'] + pos * this.poses['tx'], this.saved_poses['ty'] + pos * this.poses['ty'], this.saved_poses['tz'] + pos * this.poses['tz']);
      this.set_matrix(transform_matrix);
      this.apply_matrix();
      return requestAnimationFrame((function(_this) {
        return function() {
          return _this.animate_frame(time + 32, duration, animation_function);
        };
      })(this));
    } else {
      ref = this.poses;
      for (key in ref) {
        val = ref[key];
        switch (key) {
          case 'tx':
          case 'ty':
          case 'tz':
            this.saved_poses[key] = this.saved_poses[key] + val;
            break;
          case 'rx':
          case 'ry':
          case 'rz':
            this.saved_poses[key] = this.saved_poses[key] + val;
            break;
          case 'sx':
          case 'sy':
          case 'sz':
            if (val !== 0) {
              this.saved_poses[key] = this.saved_poses[key] * val;
            }
        }
      }
      if (this.callback) {
        this.callback();
      }
      this.callback = null;
      return this.next_item();
    }
  };

  JTSmoothSurface.prototype.next_item_abs = function() {
    var params;
    if (this.queue_abs.length > 0) {
      params = this.queue_abs.shift();
      return this.animate_abs(params['positions'], params['duration'], params['animation_function'], params['callback']);
    }
  };

  JTSmoothSurface.prototype.next_item_custom = function() {
    var params;
    if (this.queue_custom.length > 0) {
      params = this.queue_custom.shift();
      return this.animate_custom(params['positions'], params['custom_function'], params['duration'], params['animation_function'], params['callback']);
    }
  };

  JTSmoothSurface.prototype.pause = function() {
    this.animating = false;
    this.saved_poses = this.current;
    cancelAnimationFrame(this.loop);
    if (this.callback) {
      this.callback();
    }
    this.callback = null;
    return this.saved_poses;
  };

  JTSmoothSurface.prototype.animate_abs = function(positions, duration, animation_function, callback, cache_key) {
    var key, ref, val;
    if (animation_function == null) {
      animation_function = null;
    }
    if (callback == null) {
      callback = null;
    }
    if (cache_key == null) {
      cache_key = null;
    }
    if (!this.animating) {
      this.animating = true;
      this.last_frame = (new Date).getTime() - 16;
      if (callback) {
        this.callback = callback;
      }
      this.pos = 0;
      this.poses = {};
      ref = this.saved_poses;
      for (key in ref) {
        val = ref[key];
        switch (key) {
          case 'tx':
          case 'ty':
          case 'tz':
            this.poses[key] = positions[key] || positions[key] === 0 ? positions[key] - val : 0;
            break;
          case 'rx':
          case 'ry':
          case 'rz':
            this.poses[key] = positions[key] || positions[key] === 0 ? positions[key] - val : 0;
            break;
          case 'sx':
          case 'sy':
          case 'sz':
            this.poses[key] = positions[key] || positions[key] === 0 ? positions[key] : 1;
        }
      }
      return this.loop = requestAnimationFrame((function(_this) {
        return function() {
          return _this.animate_frame_abs(0, duration, animation_function, cache_key);
        };
      })(this));
    } else {
      return this.queue_abs.push({
        positions: positions,
        duration: duration,
        animation_function: animation_function,
        callback: callback
      });
    }
  };

  JTSmoothSurface.prototype.animate_frame_abs = function(time, duration, animation_function, cache_key) {
    var diff, frame, key, pos, pos_x, pos_y, pos_z, ref, rot_x, rot_y, rot_z, sca_x, sca_y, sca_z, transform_matrix, val;
    if (animation_function == null) {
      animation_function = null;
    }
    if (cache_key == null) {
      cache_key = null;
    }
    if (time <= duration) {
      frame = (new Date).getTime();
      diff = frame - this.last_frame;
      if (duration - time < 16) {
        time = duration;
      }
      if (diff > 15 || time === duration) {
        pos = this.get_pos(time, duration, animation_function);
        this.pos = pos;
        pos_x = this.saved_poses['tx'] + pos * this.poses['tx'];
        pos_y = this.saved_poses['ty'] + pos * this.poses['ty'];
        pos_z = this.saved_poses['tz'] + pos * this.poses['tz'];
        rot_x = this.saved_poses['rx'] + pos * this.poses['rx'];
        rot_y = this.saved_poses['ry'] + pos * this.poses['ry'];
        rot_z = this.saved_poses['rz'] + pos * this.poses['rz'];
        sca_x = this.saved_poses['sx'] + pos * (this.poses['sx'] - this.saved_poses['sx']);
        sca_y = this.saved_poses['sy'] + pos * (this.poses['sy'] - this.saved_poses['sy']);
        sca_z = this.saved_poses['sz'] + pos * (this.poses['sz'] - this.saved_poses['sz']);
        this.current = {
          tx: pos_x,
          ty: pos_y,
          tz: pos_z,
          rx: rot_x,
          ry: rot_y,
          rz: rot_z,
          sx: sca_x,
          sy: sca_y,
          sz: sca_z
        };
        transform_matrix = new JTMatrix(4);
        transform_matrix.scale(sca_x, sca_y, sca_z);
        transform_matrix.rotate(rot_x, rot_y, rot_z);
        transform_matrix.transform(pos_x, pos_y, pos_z);
        this.set_matrix(transform_matrix);
        this.apply_matrix();
        this.last_frame = frame;
        return this.loop = requestAnimationFrame((function(_this) {
          return function() {
            return _this.animate_frame_abs(time + diff, duration, animation_function, cache_key);
          };
        })(this));
      } else {
        return this.loop = requestAnimationFrame((function(_this) {
          return function() {
            return _this.animate_frame_abs(time, duration, animation_function, cache_key);
          };
        })(this));
      }
    } else {
      ref = this.poses;
      for (key in ref) {
        val = ref[key];
        switch (key) {
          case 'tx':
          case 'ty':
          case 'tz':
            this.saved_poses[key] = this.saved_poses[key] + val;
            break;
          case 'rx':
          case 'ry':
          case 'rz':
            this.saved_poses[key] = this.saved_poses[key] + val;
            break;
          case 'sx':
          case 'sy':
          case 'sz':
            this.saved_poses[key] = val;
        }
      }
      this.animating = false;
      if (this.callback) {
        this.callback();
      }
      this.callback = null;
      return this.next_item_abs();
    }
  };

  JTSmoothSurface.prototype.animate_custom = function(positions, custom_function, duration, animation_function, callback, cache_key) {
    var key, ref, val;
    if (animation_function == null) {
      animation_function = null;
    }
    if (callback == null) {
      callback = null;
    }
    if (cache_key == null) {
      cache_key = null;
    }
    if (!this.animating) {
      this.animating = true;
      this.last_frame = (new Date).getTime() - 16;
      if (callback) {
        this.callback = callback;
      }
      this.pos = 0;
      this.poses = {};
      ref = this.saved_poses;
      for (key in ref) {
        val = ref[key];
        switch (key) {
          case 'tx':
          case 'ty':
          case 'tz':
            this.poses[key] = positions[key] || positions[key] === 0 ? positions[key] - val : 0;
            break;
          case 'rx':
          case 'ry':
          case 'rz':
            this.poses[key] = positions[key] || positions[key] === 0 ? positions[key] - val : 0;
            break;
          case 'sx':
          case 'sy':
          case 'sz':
            this.poses[key] = positions[key] || positions[key] === 0 ? positions[key] : 1;
        }
      }
      return this.loop = requestAnimationFrame((function(_this) {
        return function() {
          return _this.animate_frame_custom(0, custom_function, duration, animation_function, cache_key);
        };
      })(this));
    } else {
      return this.queue_custom.push({
        positions: positions,
        custom_function: custom_function,
        duration: duration,
        animation_function: animation_function,
        callback: callback
      });
    }
  };

  JTSmoothSurface.prototype.animate_frame_custom = function(time, custom_function, duration, animation_function, cache_key) {
    var diff, frame, key, pos, pos_x, pos_y, pos_z, ref, rot_x, rot_y, rot_z, sca_x, sca_y, sca_z, val;
    if (animation_function == null) {
      animation_function = null;
    }
    if (cache_key == null) {
      cache_key = null;
    }
    if (time <= duration) {
      frame = (new Date).getTime();
      diff = frame - this.last_frame;
      if (duration - time < 16) {
        time = duration;
      }
      if (diff > 15 || time === duration) {
        pos = this.get_pos(time, duration, animation_function);
        this.pos = pos;
        pos_x = this.saved_poses['tx'] + pos * this.poses['tx'];
        pos_y = this.saved_poses['ty'] + pos * this.poses['ty'];
        pos_z = this.saved_poses['tz'] + pos * this.poses['tz'];
        rot_x = this.saved_poses['rx'] + pos * this.poses['rx'];
        rot_y = this.saved_poses['ry'] + pos * this.poses['ry'];
        rot_z = this.saved_poses['rz'] + pos * this.poses['rz'];
        sca_x = this.saved_poses['sx'] + pos * (this.poses['sx'] - this.saved_poses['sx']);
        sca_y = this.saved_poses['sy'] + pos * (this.poses['sy'] - this.saved_poses['sy']);
        sca_z = this.saved_poses['sz'] + pos * (this.poses['sz'] - this.saved_poses['sz']);
        this.current = {
          tx: pos_x,
          ty: pos_y,
          tz: pos_z,
          rx: rot_x,
          ry: rot_y,
          rz: rot_z,
          sx: sca_x,
          sy: sca_y,
          sz: sca_z
        };
        custom_function(this.current);
        this.last_frame = frame;
        return this.loop = requestAnimationFrame((function(_this) {
          return function() {
            return _this.animate_frame_custom(time + diff, custom_function, duration, animation_function, cache_key);
          };
        })(this));
      } else {
        return this.loop = requestAnimationFrame((function(_this) {
          return function() {
            return _this.animate_frame_custom(time, custom_function, duration, animation_function, cache_key);
          };
        })(this));
      }
    } else {
      ref = this.poses;
      for (key in ref) {
        val = ref[key];
        switch (key) {
          case 'tx':
          case 'ty':
          case 'tz':
            this.saved_poses[key] = this.saved_poses[key] + val;
            break;
          case 'rx':
          case 'ry':
          case 'rz':
            this.saved_poses[key] = this.saved_poses[key] + val;
            break;
          case 'sx':
          case 'sy':
          case 'sz':
            this.saved_poses[key] = val;
        }
      }
      this.animating = false;
      if (this.callback) {
        this.callback();
      }
      this.callback = null;
      return this.next_item_custom();
    }
  };

  JTSmoothSurface.prototype.get_pos = function(time, duration, animation_function) {
    var b, c, d, pos, t;
    if (animation_function == null) {
      animation_function = null;
    }
    b = 0;
    d = duration;
    c = 1;
    t = time;
    if (animation_function) {
      pos = animation_function(t, b, c, d);
    } else {
      pos = (t /= d / 2) < 1 ? c / 2 * t * t * t + b : c / 2 * ((t -= 2) * t * t + 2) + b;
    }
    return pos;
  };

  JTSmoothSurface.prototype.cache_positions = function(key, duration, animation_function) {
    var b, c, d, k, pos, ref, results, t, time;
    if (animation_function == null) {
      animation_function = null;
    }
    this.cache[key] = {};
    results = [];
    for (time = k = 0, ref = duration; 0 <= ref ? k <= ref : k >= ref; time = 0 <= ref ? ++k : --k) {
      b = 0;
      d = duration;
      c = 1;
      t = time;
      if (animation_function) {
        pos = animation_function(t, b, c, d);
      } else {
        pos = (t /= d / 2) < 1 ? c / 2 * t * t * t + b : c / 2 * ((t -= 2) * t * t + 2) + b;
      }
      pos = Math.round(pos * 100) / 100;
      results.push(this.cache[key][time] = pos);
    }
    return results;
  };

  JTSmoothSurface.prototype.get_cached_pos = function(key, time) {
    return this.cache[key][time];
  };

  JTSmoothSurface.prototype.set_size = function(size) {
    var size_x, size_y;
    this.saved_sizes = [this.j_elem.outerWidth(), this.j_elem.outerHeight()];
    size_x = size[0] || size[0] === 0 ? size[0] : this.saved_sizes[0];
    size_y = size[1] || size[1] === 0 ? size[1] : this.saved_sizes[1];
    this.current_size = [size_x, size_y];
    return this.j_elem.css({
      width: size_x,
      height: size_y
    });
  };

  JTSmoothSurface.prototype.animate_size = function(sizes, duration, animation_function, callback) {
    if (animation_function == null) {
      animation_function = null;
    }
    if (callback == null) {
      callback = null;
    }
    if (!this.animating_size) {
      this.animating_size = true;
      this.saved_sizes = this.current_size ? this.current_size : [this.j_elem.outerWidth(), this.j_elem.outerHeight()];
      if (callback) {
        this.size_callback = callback;
      }
      this.size_pos = 0;
      this.sizes = [];
      if (sizes[0] || sizes[0] === 0) {
        this.animate_x = true;
        this.sizes.push(sizes[0]);
      } else {
        this.animate_x = false;
        this.sizes.push(this.saved_sizes[0]);
      }
      if (sizes[1] || sizes[1] === 0) {
        this.animate_y = true;
        this.sizes.push(sizes[1]);
      } else {
        this.animate_y = false;
        this.sizes.push(this.saved_sizes[1]);
      }
      return this.size_loop = requestAnimationFrame((function(_this) {
        return function() {
          return _this.animate_size_frame(0, duration, animation_function);
        };
      })(this));
    } else {
      return this.queue_size.push({
        sizes: sizes,
        duration: duration,
        animation_function: animation_function,
        callback: callback
      });
    }
  };

  JTSmoothSurface.prototype.animate_size_frame = function(time, duration, animation_function) {
    var pos, size_x, size_y;
    if (animation_function == null) {
      animation_function = null;
    }
    if (time <= duration) {
      pos = this.get_pos(time, duration, animation_function);
      this.size_pos = pos;
      size_x = this.animate_x ? this.saved_sizes[0] + pos * (this.sizes[0] - this.saved_sizes[0]) : this.saved_sizes[0];
      size_y = this.animate_y ? this.saved_sizes[1] + pos * (this.sizes[1] - this.saved_sizes[1]) : this.saved_sizes[1];
      this.current_size = [size_x, size_y];
      this.j_elem.css({
        width: size_x,
        height: size_y
      });
      return this.size_loop = requestAnimationFrame((function(_this) {
        return function() {
          return _this.animate_size_frame(time + 32, duration, animation_function);
        };
      })(this));
    } else {
      if (this.animate_x) {
        this.saved_sizes[0] = this.saved_sizes[0] + this.sizes[0];
      }
      if (this.animate_y) {
        this.saved_sizes[1] = this.saved_sizes[1] + this.sizes[1];
      }
      this.animating_size = false;
      if (this.size_callback) {
        this.size_callback();
      }
      this.size_callback = null;
      return this.next_item_size();
    }
  };

  JTSmoothSurface.prototype.next_item_size = function() {
    var animation_function, callback, duration, ps, sizes;
    if (this.queue_size.length > 0) {
      ps = this.queue_size.shift();
      sizes = ps['sizes'];
      duration = ps['duration'];
      animation_function = ps['animation_function'];
      callback = ps['callback'];
      return this.animate_size(sizes, duration, animation_function, callback);
    }
  };

  JTSmoothSurface.prototype.pause_size = function() {
    this.animating_size = false;
    cancelAnimationFrame(this.size_loop);
    this.saved_sizes = this.current_size ? this.current_size : [this.j_elem.outerWidth(), this.j_elem.outerHeight()];
    if (this.size_callback) {
      this.size_callback();
    }
    return this.size_callback = null;
  };

  JTSmoothSurface.prototype.resize_limit = function(positions) {
    var key, limit_y, pos, pos_y, ref, ref1, results, transform_matrix, val;
    this.poses = {};
    this.saved_poses = {
      tx: 0,
      ty: 0,
      tz: 0,
      rx: 0,
      ry: 0,
      rz: 0,
      sx: 1,
      sy: 1,
      sz: 1
    };
    ref = this.saved_poses;
    for (key in ref) {
      val = ref[key];
      this.poses[key] = positions[key] || positions[key] === 0 ? positions[key] : val;
    }
    pos_y = this.poses['ty'];
    limit_y = this.limit_positions['ty'];
    if (limit_y) {
      if (pos_y < limit_y[0]) {
        this.poses['ty'] = limit_y[0];
        this.velocities['ty'] = 0;
      }
      if (pos_y > limit_y[1]) {
        this.poses['ty'] = limit_y[1];
        this.velocities['ty'] = 0;
      }
    }
    this.current = this.poses;
    if (this.position_change_function) {
      this.position_change_function(this.current);
    }
    transform_matrix = new JTMatrix(4);
    pos = 1;
    transform_matrix.scale(this.saved_poses['sx'], this.saved_poses['sy'], this.saved_poses['sz']);
    transform_matrix.rotate(this.saved_poses['rx'], this.saved_poses['ry'], this.saved_poses['rz']);
    transform_matrix.transform(this.saved_poses['tx'] + pos * this.poses['tx'], this.saved_poses['ty'] + pos * this.poses['ty'], this.saved_poses['tz'] + pos * this.poses['tz']);
    this.set_matrix(transform_matrix);
    this.apply_matrix();
    ref1 = this.poses;
    results = [];
    for (key in ref1) {
      val = ref1[key];
      switch (key) {
        case 'tx':
        case 'ty':
        case 'tz':
          results.push(this.saved_poses[key] = this.saved_poses[key] + val);
          break;
        case 'rx':
        case 'ry':
        case 'rz':
          results.push(this.saved_poses[key] = this.saved_poses[key] + val);
          break;
        case 'sx':
        case 'sy':
        case 'sz':
          results.push(this.saved_poses[key] = val);
          break;
        default:
          results.push(void 0);
      }
    }
    return results;
  };

  JTSmoothSurface.prototype.bind_position_change_function = function(f) {
    return this.position_change_function = f;
  };

  JTSmoothSurface.prototype.velocity = function(velocities, callback) {
    var key, ref, val;
    if (!this.animating_velocity) {
      this.animating_velocity = true;
      if (callback) {
        this.velocity_callback = callback;
      }
      this.velocity_pos = 0;
      this.velocities = {};
      ref = this.saved_velocities;
      for (key in ref) {
        val = ref[key];
        switch (key) {
          case 'tx':
          case 'ty':
          case 'tz':
            this.velocities[key] = velocities[key] || velocities[key] === 0 ? velocities[key] : val;
        }
      }
      return this.velocity_loop = requestAnimationFrame((function(_this) {
        return function() {
          return _this.animate_velocity_frame();
        };
      })(this));
    } else {
      return this.queue_velocities.push({
        velocities: velocities,
        callback: callback
      });
    }
  };

  JTSmoothSurface.prototype.set_limits = function(limit_positions) {
    return this.limit_positions = limit_positions;
  };

  JTSmoothSurface.prototype.animate_velocity_frame = function() {
    var interval_y, limit_y, next_y, pos_x, pos_y, pos_z, transform_matrix, vtx, vty, vtz;
    vtx = this.velocities['tx'];
    vty = this.velocities['ty'];
    vtz = this.velocities['tz'];
    if ((vtx !== 0) || (vty !== 0) || (vtz !== 0)) {
      next_y = vty - (Math.abs(vty - 1));
      interval_y = Math.abs(next_y) / next_y * 14;
      this.velocities['ty'] = (next_y < 1) && (next_y > -1) ? 0 : vty - interval_y;
      pos_x = this.saved_poses['tx'];
      pos_y = this.saved_poses['ty'] + this.velocities['ty'] / 60.0;
      pos_z = this.saved_poses['tz'];
      limit_y = this.limit_positions['ty'];
      if (limit_y) {
        if (pos_y < limit_y[0]) {
          pos_y = limit_y[0];
          this.velocities['ty'] = 0;
        }
        if (pos_y > limit_y[1]) {
          pos_y = limit_y[1];
          this.velocities['ty'] = 0;
        }
      }
      this.current['tx'] = pos_x;
      this.current['ty'] = pos_y;
      this.current['tz'] = pos_z;
      this.saved_poses = this.current;
      if (this.position_change_function) {
        this.position_change_function(this.saved_poses);
      }
      transform_matrix = new JTMatrix(4);
      transform_matrix.transform(pos_x, pos_y, pos_z);
      transform_matrix.scale(this.saved_poses['sx'], this.saved_poses['sy'], this.saved_poses['sz']);
      transform_matrix.rotate(this.saved_poses['rx'], this.saved_poses['ry'], this.saved_poses['rz']);
      this.set_matrix(transform_matrix);
      this.apply_matrix();
      return this.velocity_loop = requestAnimationFrame((function(_this) {
        return function() {
          return _this.animate_velocity_frame();
        };
      })(this));
    } else {
      this.animating_velocity = false;
      if (this.velocity_callback) {
        this.velocity_callback();
      }
      this.velocity_callback = null;
      return this.next_item_velocity();
    }
  };

  JTSmoothSurface.prototype.next_item_velocity = function() {
    var params;
    if (this.queue_velocities.length > 0) {
      params = this.queue_velocities.shift();
      return this.velocity(params['velocities'], params['callback']);
    }
  };

  JTSmoothSurface.prototype.pause_velocity = function() {
    this.animating_velocity = false;
    this.saved_poses = this.current;
    cancelAnimationFrame(this.velocity_loop);
    this.saved_velocities = {
      tx: 0,
      ty: 0,
      tz: 0
    };
    this.velocities = {
      tx: 0,
      ty: 0,
      tz: 0
    };
    if (this.velocity_callback) {
      this.velocity_callback();
    }
    this.velocity_callback = null;
    return this.saved_poses;
  };

  return JTSmoothSurface;

})();

window.JTSmoothSurface = JTSmoothSurface;

JTStateHash = (function() {
  function JTStateHash(hash) {
    var i, k, ref;
    this.hash = hash;
    this.update = bind(this.update, this);
    this.add_function = bind(this.add_function, this);
    this.set_state = bind(this.set_state, this);
    this.get_state = bind(this.get_state, this);
    this.set = bind(this.set, this);
    this.get = bind(this.get, this);
    this.num_states = this.hash['delegate']['jt_state_hash_int_for_num_states'](this);
    this.state = 0;
    this.state_hash = {};
    this.state_functions = {};
    for (i = k = 0, ref = this.num_states - 1; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
      this.state_hash[i] = {};
    }
  }

  JTStateHash.prototype.get = function(key) {
    return this.state_hash[this.state][key];
  };

  JTStateHash.prototype.set = function(state, key, val) {
    var i, k, ref, results;
    if (state || state === 0) {
      return this.state_hash[state][key] = val;
    } else {
      results = [];
      for (i = k = 0, ref = this.num_states - 1; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
        results.push(this.state_hash[i][key] = val);
      }
      return results;
    }
  };

  JTStateHash.prototype.get_state = function() {
    return this.state;
  };

  JTStateHash.prototype.set_state = function(state) {
    return this.state = state;
  };

  JTStateHash.prototype.add_function = function(key, state_function) {
    return this.state_functions[key] = state_function;
  };

  JTStateHash.prototype.update = function(force) {
    var key, old_state, ref, state, state_function;
    if (force == null) {
      force = false;
    }
    state = this.hash['delegate']['jt_state_hash_current_state'](this);
    if (state !== this.state || force) {
      old_state = this.state;
      ref = this.state_functions;
      for (key in ref) {
        state_function = ref[key];
        state_function(state, old_state);
      }
      this.hash['delegate']['jt_state_hash_changed_state'](this, state);
      return this.state = state;
    }
  };

  return JTStateHash;

})();

JT = (function() {
  function JT() {}

  JT.intersperse = function(a, s) {
    a = a.reduce((function(acc, x) {
      acc.push(x);
      acc.push(s);
      return acc;
    }), []);
    a.pop();
    return a;
  };

  JT.respond_to = function(object, function_name) {
    return (typeof object[function_name]) !== 'undefined';
  };

  JT.exists = function(object) {
    return (object || object === 0) && (typeof object) !== 'undefined' && object !== "JTNullValue";
  };

  JT.exists_string = function(object) {
    return this.exists(object) && !this.blank(object);
  };

  JT.exists_object = function(object) {
    return this.exists(object) && ((typeof object) === 'object') && Object.keys(object).length !== 0;
  };

  JT.exists_number = function(object) {
    return this.exists(object);
  };

  JT.exists_nonempty = function(object) {
    var object_exists;
    switch (true) {
      case (typeof object) === 'string':
        object_exists = this.exists_string(object);
        break;
      case (typeof object) === 'object':
        object_exists = this.exists_object(object);
        break;
      case (typeof object) === 'number':
        object_exists = this.exists_number(object);
    }
    if (object_exists) {
      return object_exists;
    } else {
      return false;
    }
  };

  JT.pad = function(n, width, z) {
    z = z || '0';
    n = n + '';
    if (n.length >= width) {
      return n;
    } else {
      return new Array(width - n.length + 1).join(z) + n;
    }
  };

  JT.strip = function(string) {
    string = string.replace(/(^\s*)|(\s*jQuery)/g, '');
    string = this.remove_excess_space(string);
    return string;
  };

  JT.remove_excess_space = function(string) {
    return string.replace(/\s+/g, ' ');
  };

  JT.remove_all_space = function(string) {
    return string.replace(/\s+/g, '');
  };

  JT.blank = function(string) {
    return /^\s*jQuery/.test(string);
  };

  JT.is_hex = function(input) {
    var valid;
    input = this.strip(input).toLowerCase();
    valid = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];
    return (input.length === 6) && input.split("").reduce((function(a, x) {
      if (a && (indexOf.call(valid, x) >= 0)) {
        return true;
      } else {
        return false;
      }
    }), true);
  };

  JT.email_format = function(email) {
    return /.+@.+\.\w+/.test(email);
  };

  JT.array_equal = function(a1, a2) {
    var k, ref, results;
    if (!a1 || !a2) {
      return false;
    }
    if (a1.length !== a2.length) {
      return false;
    }
    return (function() {
      results = [];
      for (var k = 0, ref = a1.length - 1; 0 <= ref ? k <= ref : k >= ref; 0 <= ref ? k++ : k--){ results.push(k); }
      return results;
    }).apply(this).reduce((function(a, x) {
      if (a1[x] !== a2[x]) {
        a = false;
      }
      return a;
    }), true);
  };

  JT.to_params_string = function(obj) {
    return Object.keys(obj).reduce((function(a, x) {
      a.push(x + "=" + obj[x]);
      return a;
    }), []).join("&");
  };

  JT.merge = function(o1, o2) {
    return Object.keys(o2).reduce((function(a, x) {
      a[x] = o2[x];
      return a;
    }), Object.keys(o1).reduce((function(a, x) {
      a[x] = o1[x];
      return a;
    }), {}));
  };

  JT.window_or_max_width = function(max_width, padding) {
    var width, window_margin, window_width;
    if (padding == null) {
      padding = 0;
    }
    window_width = jQuery(window).width();
    window_margin = window_width - (padding * 2);
    width = window_margin < max_width ? window_margin : max_width;
    return width;
  };

  JT.window_or_max_height = function(max_height, padding) {
    var height, window_height, window_margin;
    if (padding == null) {
      padding = 0;
    }
    window_height = jQuery(window).height();
    window_margin = window_height - (padding * 2);
    height = window_margin < max_height ? window_margin : max_height;
    return height;
  };

  JT.pass_through_or_max_fit = function(width, height, max_width, max_height) {
    var a;
    if (width > max_width || height > max_height) {
      a = this.contain(width, height, max_width, max_height);
      width = a[0];
      height = a[1];
    }
    width = Math.round(width);
    height = Math.round(height);
    return [width, height];
  };

  JT.contain = function(width, height, target_width, target_height) {
    var new_height, new_width, source_aspect, target_aspect;
    source_aspect = parseFloat(width) / parseFloat(height);
    target_aspect = parseFloat(target_width) / parseFloat(target_height);
    if (source_aspect <= target_aspect) {
      new_height = target_height;
      new_width = width * new_height / height;
    } else {
      new_width = target_width;
      new_height = height * new_width / width;
    }
    new_width = Math.round(new_width);
    new_height = Math.round(new_height);
    return [new_width, new_height];
  };

  JT.cover = function(width, height, target_width, target_height) {
    var new_height, new_width, source_aspect, target_aspect;
    source_aspect = parseFloat(width) / parseFloat(height);
    target_aspect = parseFloat(target_width) / parseFloat(target_height);
    if (source_aspect >= target_aspect) {
      new_height = target_height;
      new_width = width * new_height / height;
    } else {
      new_width = target_width;
      new_height = height * new_width / width;
    }
    new_width = Math.round(new_width);
    new_height = Math.round(new_height);
    return [new_width, new_height];
  };

  JT.is_chrome = function() {
    return !!window.chrome;
  };

  JT.is_safari = function() {
    return navigator.userAgent.indexOf('Safari') !== -1;
  };

  JT.is_mobile = function() {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  };

  JT.monospace = function(string, classname) {
    return string.split("").map((function(_this) {
      return function(x) {
        return "<div class='" + classname + "'>" + x + "</div>";
      };
    })(this)).join("");
  };

  return JT;

})();

window.JT = JT;

jQuery(function() {
  return window.vc = new ViewController();
});
