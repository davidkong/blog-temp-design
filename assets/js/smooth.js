
/* dk replaced all $ with jQuery in order to manage compatibility */

// Generated by CoffeeScript 1.9.1
(function() {
  var JT, JTConstants, JTCurve, JTDebug, JTFileSystem, JTFormats, JTImage, JTImageCache, JTKeyTester, JTMatrix, JTSVG, JTSmoothSurface, SpeedTest, Utility,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  JTMatrix = (function() {
    function JTMatrix(matrix) {
      this.print = bind(this.print, this);
      this.css = bind(this.css, this);
      this.scale = bind(this.scale, this);
      this.rotate = bind(this.rotate, this);
      this.transform = bind(this.transform, this);
      this.rnd = bind(this.rnd, this);
      this.multiply = bind(this.multiply, this);
      this.make_identity = bind(this.make_identity, this);
      this.make_matrix = bind(this.make_matrix, this);
      if (jQuery.isArray(matrix)) {
        this.make_matrix(matrix);
      } else {
        this.make_identity(matrix);
      }
    }

    JTMatrix.prototype.make_matrix = function(matrix) {
      var column, i, j, k, len, len1, m, results, row;
      this.rows = [];
      this.columns = [];
      i = 0;
      results = [];
      for (k = 0, len = matrix.length; k < len; k++) {
        row = matrix[k];
        if (jQuery.isArray(row)) {
          this.rows.push(row);
          j = 0;
          for (m = 0, len1 = row.length; m < len1; m++) {
            column = row[m];
            if (!this.columns[j]) {
              this.columns.push([]);
            }
            this.columns[j][i] = column;
            j += 1;
          }
          results.push(i += 1);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    JTMatrix.prototype.make_identity = function(n) {
      var k, matrix, ref, results;
      this.rows = [];
      this.columns = [];
      matrix = (function() {
        results = [];
        for (var k = 0, ref = n - 1; 0 <= ref ? k <= ref : k >= ref; 0 <= ref ? k++ : k--){ results.push(k); }
        return results;
      }).apply(this).reduce(((function(_this) {
        return function(acc1, x) {
          var k, ref, results;
          acc1.push((function() {
            results = [];
            for (var k = 0, ref = n - 1; 0 <= ref ? k <= ref : k >= ref; 0 <= ref ? k++ : k--){ results.push(k); }
            return results;
          }).apply(this).reduce((function(acc2, y) {
            acc2.push(x === y ? 1 : 0);
            return acc2;
          }), []));
          return acc1;
        };
      })(this)), []);
      return this.make_matrix(matrix);
    };

    JTMatrix.prototype.multiply = function(b) {
      var column, i, j, k, m, o, output_matrix, q, ref, ref1, ref2, ref3, results, results1, row;
      output_matrix = (function() {
        results = [];
        for (var k = 0, ref = this.rows.length - 1; 0 <= ref ? k <= ref : k >= ref; 0 <= ref ? k++ : k--){ results.push(k); }
        return results;
      }).apply(this).reduce(((function(_this) {
        return function(acc, x) {
          acc.push([]);
          return acc;
        };
      })(this)), []);
      for (i = m = 0, ref1 = this.rows.length - 1; 0 <= ref1 ? m <= ref1 : m >= ref1; i = 0 <= ref1 ? ++m : --m) {
        row = this.rows[i];
        for (j = o = 0, ref2 = b.columns.length - 1; 0 <= ref2 ? o <= ref2 : o >= ref2; j = 0 <= ref2 ? ++o : --o) {
          column = b.columns[j];
          output_matrix[i][j] = (function() {
            results1 = [];
            for (var q = 0, ref3 = row.length - 1; 0 <= ref3 ? q <= ref3 : q >= ref3; 0 <= ref3 ? q++ : q--){ results1.push(q); }
            return results1;
          }).apply(this).reduce(((function(_this) {
            return function(acc, x) {
              return acc += row[x] * column[x];
            };
          })(this)), 0);
        }
      }
      return output_matrix;
    };

    JTMatrix.prototype.rnd = function(n) {
      n *= 1000000.0;
      n = Math.round(n);
      n /= 1000000.0;
      return n;
    };

    JTMatrix.prototype.transform = function(x, y, z) {
      var matrix, r1, r2, r3, r4;
      r1 = [1, 0, 0, 0];
      r2 = [0, 1, 0, 0];
      r3 = [0, 0, 1, 0];
      r4 = [x, y, z, 1];
      matrix = this.multiply(new JTMatrix([r1, r2, r3, r4]));
      this.make_matrix(matrix);
      return this;
    };

    JTMatrix.prototype.rotate = function(x, y, z) {
      var matrix, r1, r2, r3, r4;
      if (x !== 0) {
        r1 = [1, 0, 0, 0];
        r2 = [0, this.rnd(Math.cos(x * Math.PI / 180.0)), -this.rnd(Math.sin(x * Math.PI / 180.0)), 0];
        r3 = [0, this.rnd(Math.sin(x * Math.PI / 180.0)), this.rnd(Math.cos(x * Math.PI / 180.0)), 0];
        r4 = [0, 0, 0, 1];
        matrix = this.multiply(new JTMatrix([r1, r2, r3, r4]));
        this.make_matrix(matrix);
      }
      if (y !== 0) {
        r1 = [this.rnd(Math.cos(y * Math.PI / 180.0)), 0, this.rnd(Math.sin(y * Math.PI / 180.0)), 0];
        r2 = [0, 1, 0, 0];
        r3 = [-this.rnd(Math.sin(y * Math.PI / 180.0)), 0, this.rnd(Math.cos(y * Math.PI / 180.0)), 0];
        r4 = [0, 0, 0, 1];
        matrix = this.multiply(new JTMatrix([r1, r2, r3, r4]));
        this.make_matrix(matrix);
      }
      if (z !== 0) {
        r1 = [this.rnd(Math.cos(z * Math.PI / 180.0)), -this.rnd(Math.sin(z * Math.PI / 180.0)), 0, 0];
        r2 = [this.rnd(Math.sin(z * Math.PI / 180.0)), this.rnd(Math.cos(z * Math.PI / 180.0)), 0, 0];
        r3 = [0, 0, 1, 0];
        r4 = [0, 0, 0, 1];
        matrix = this.multiply(new JTMatrix([r1, r2, r3, r4]));
        this.make_matrix(matrix);
      }
      return this;
    };

    JTMatrix.prototype.scale = function(x, y, z) {
      var matrix, r1, r2, r3, r4;
      r1 = [x, 0, 0, 0];
      r2 = [0, y, 0, 0];
      r3 = [0, 0, z, 0];
      r4 = [0, 0, 0, 1];
      matrix = this.multiply(new JTMatrix([r1, r2, r3, r4]));
      this.make_matrix(matrix);
      return this;
    };

    JTMatrix.prototype.css = function() {
      return "matrix3d(" + (this.rows.reduce(((function(_this) {
        return function(acc, row) {
          var k, len, x;
          for (k = 0, len = row.length; k < len; k++) {
            x = row[k];
            acc.push(x);
          }
          return acc;
        };
      })(this)), []).join(",")) + ")";
    };

    JTMatrix.prototype.print = function() {
      var k, len, ref, results, row;
      ref = this.rows;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        row = ref[k];
        results.push(console.log("|" + row.reduce(((function(_this) {
          return function(acc, x) {
            acc += " " + x + " ";
            return acc;
          };
        })(this)), "") + "|"));
      }
      return results;
    };

    return JTMatrix;

  })();

  window.JTMatrix = JTMatrix;

  JTSmoothSurface = (function() {
    function JTSmoothSurface(hash) {
      this.hash = hash;
      this.pause_velocity = bind(this.pause_velocity, this);
      this.next_item_velocity = bind(this.next_item_velocity, this);
      this.animate_velocity_frame = bind(this.animate_velocity_frame, this);
      this.set_limits = bind(this.set_limits, this);
      this.velocity = bind(this.velocity, this);
      this.bind_position_change_function = bind(this.bind_position_change_function, this);
      this.resize_limit = bind(this.resize_limit, this);
      this.pause_size = bind(this.pause_size, this);
      this.next_item_size = bind(this.next_item_size, this);
      this.animate_size_frame = bind(this.animate_size_frame, this);
      this.animate_size = bind(this.animate_size, this);
      this.set_size = bind(this.set_size, this);
      this.get_cached_pos = bind(this.get_cached_pos, this);
      this.cache_positions = bind(this.cache_positions, this);
      this.get_pos = bind(this.get_pos, this);
      this.animate_frame_abs = bind(this.animate_frame_abs, this);
      this.animate_abs = bind(this.animate_abs, this);
      this.pause = bind(this.pause, this);
      this.next_item_abs = bind(this.next_item_abs, this);
      this.animate_frame = bind(this.animate_frame, this);
      this.rotate = bind(this.rotate, this);
      this.resize = bind(this.resize, this);
      this.next_item = bind(this.next_item, this);
      this.animate = bind(this.animate, this);
      this.apply_matrix = bind(this.apply_matrix, this);
      this.append_matrix = bind(this.append_matrix, this);
      this.reset = bind(this.reset, this);
      this.set_matrix = bind(this.set_matrix, this);
      this.elem_id = this.hash['element_id'];
      this.j_elem = jQuery("#" + this.elem_id);
      this.pos = 0;
      this.matrix = new JTMatrix(4);
      this.saved_poses = {
        tx: 0,
        ty: 0,
        tz: 0,
        rx: 0,
        ry: 0,
        rz: 0,
        sx: 1,
        sy: 1,
        sz: 1
      };
      this.saved_velocities = {
        tx: 0,
        ty: 0,
        tz: 0
      };
      this.current = this.saved_poses;
      this.animating = false;
      this.queue = [];
      this.queue_abs = [];
      this.queue_size = [];
      this.queue_velocities = [];
      this.cache = {};
      this.loop = null;
      this.size_loop = null;
    }

    JTSmoothSurface.prototype.set_matrix = function(matrix) {
      return this.matrix = matrix;
    };

    JTSmoothSurface.prototype.reset = function() {
      this.matrix = new JTMatrix(4);
      return this.set_matrix(this.matrix);
    };

    JTSmoothSurface.prototype.append_matrix = function(matrix) {
      return this.matrix = new JTMatrix(this.matrix.multiply(matrix));
    };

    JTSmoothSurface.prototype.apply_matrix = function() {
      return this.j_elem.css({
        transform: this.matrix.css()
      });
    };

    JTSmoothSurface.prototype.animate = function(positions, duration, animation_function, callback) {
      var key, ref, val;
      if (animation_function == null) {
        animation_function = null;
      }
      if (callback == null) {
        callback = null;
      }
      if (!this.animating) {
        this.animating = true;
        if (callback) {
          this.callback = callback;
        }
        this.pos = 0;
        this.poses = {};
        ref = this.saved_poses;
        for (key in ref) {
          val = ref[key];
          this.poses[key] = positions[key] ? positions[key] : val;
        }
        return requestAnimationFrame((function(_this) {
          return function() {
            return _this.animate_frame(0, duration, animation_function);
          };
        })(this));
      } else {
        return this.queue.push({
          positions: positions,
          duration: duration,
          animation_function: animation_function,
          callback: callback
        });
      }
    };

    JTSmoothSurface.prototype.next_item = function() {
      var params;
      this.animating = false;
      if (this.queue.length > 0) {
        params = this.queue.shift();
        return this.animate(params['positions'], params['duration'], params['animation_function'], params['callback']);
      }
    };

    JTSmoothSurface.prototype.resize = function(positions) {
      var key, pos, ref, ref1, results, transform_matrix, val;
      this.poses = {};
      this.saved_poses = {
        tx: 0,
        ty: 0,
        tz: 0,
        rx: 0,
        ry: 0,
        rz: 0,
        sx: 1,
        sy: 1,
        sz: 1
      };
      ref = this.saved_poses;
      for (key in ref) {
        val = ref[key];
        this.poses[key] = positions[key] || positions[key] === 0 ? positions[key] : val;
      }
      this.current = this.poses;
      transform_matrix = new JTMatrix(4);
      pos = 1;
      transform_matrix.scale(this.saved_poses['sx'] + pos * (this.poses['sx'] - this.saved_poses['sx']), this.saved_poses['sy'] + pos * (this.poses['sy'] - this.saved_poses['sy']), this.saved_poses['sz'] + pos * (this.poses['sz'] - this.saved_poses['sz']));
      transform_matrix.rotate(this.saved_poses['rx'] + pos * this.poses['rx'], this.saved_poses['ry'] + pos * this.poses['ry'], this.saved_poses['rz'] + pos * this.poses['rz']);
      transform_matrix.transform(this.saved_poses['tx'] + pos * this.poses['tx'], this.saved_poses['ty'] + pos * this.poses['ty'], this.saved_poses['tz'] + pos * this.poses['tz']);
      this.set_matrix(transform_matrix);
      this.apply_matrix();
      ref1 = this.poses;
      results = [];
      for (key in ref1) {
        val = ref1[key];
        switch (key) {
          case 'tx':
          case 'ty':
          case 'tz':
            results.push(this.saved_poses[key] = this.saved_poses[key] + val);
            break;
          case 'rx':
          case 'ry':
          case 'rz':
            results.push(this.saved_poses[key] = this.saved_poses[key] + val);
            break;
          case 'sx':
          case 'sy':
          case 'sz':
            results.push(this.saved_poses[key] = val);
            break;
          default:
            results.push(void 0);
        }
      }
      return results;
    };

    JTSmoothSurface.prototype.rotate = function(x, y, z) {
      var matrix;
      matrix = new JTMatrix(this.matrix.multiply(new JTMatrix(4).rotate(x, y, z)));
      return this.set_matrix(matrix);
    };

    JTSmoothSurface.prototype.animate_frame = function(time, duration, animation_function, abs) {
      var b, c, d, key, pos, ref, t, transform_matrix, val;
      if (animation_function == null) {
        animation_function = null;
      }
      if (abs == null) {
        abs = false;
      }
      if (time <= duration) {
        b = 0;
        d = duration;
        c = 1;
        t = time;
        if (animation_function) {
          pos = animation_function(t, b, c, d);
        } else {
          pos = (t /= d / 2) < 1 ? c / 2 * t * t * t + b : c / 2 * ((t -= 2) * t * t + 2) + b;
        }
        pos = Math.round(pos * 100) / 100;
        this.pos = pos;
        transform_matrix = new JTMatrix(4);
        transform_matrix.scale(this.saved_poses['sx'] + pos * (this.poses['sx'] - this.saved_poses['sx']), this.saved_poses['sy'] + pos * (this.poses['sy'] - this.saved_poses['sy']), this.saved_poses['sz'] + pos * (this.poses['sz'] - this.saved_poses['sz']));
        transform_matrix.rotate(this.saved_poses['rx'] + pos * this.poses['rx'], this.saved_poses['ry'] + pos * this.poses['ry'], this.saved_poses['rz'] + pos * this.poses['rz']);
        transform_matrix.transform(this.saved_poses['tx'] + pos * this.poses['tx'], this.saved_poses['ty'] + pos * this.poses['ty'], this.saved_poses['tz'] + pos * this.poses['tz']);
        this.set_matrix(transform_matrix);
        this.apply_matrix();
        return requestAnimationFrame((function(_this) {
          return function() {
            return _this.animate_frame(time + 32, duration, animation_function);
          };
        })(this));
      } else {
        ref = this.poses;
        for (key in ref) {
          val = ref[key];
          switch (key) {
            case 'tx':
            case 'ty':
            case 'tz':
              this.saved_poses[key] = this.saved_poses[key] + val;
              break;
            case 'rx':
            case 'ry':
            case 'rz':
              this.saved_poses[key] = this.saved_poses[key] + val;
              break;
            case 'sx':
            case 'sy':
            case 'sz':
              if (val !== 0) {
                this.saved_poses[key] = this.saved_poses[key] * val;
              }
          }
        }
        if (this.callback) {
          this.callback();
        }
        this.callback = null;
        return this.next_item();
      }
    };

    JTSmoothSurface.prototype.next_item_abs = function() {
      var params;
      if (this.queue_abs.length > 0) {
        params = this.queue_abs.shift();
        return this.animate_abs(params['positions'], params['duration'], params['animation_function'], params['callback']);
      }
    };

    JTSmoothSurface.prototype.pause = function() {
      this.animating = false;
      this.saved_poses = this.current;
      cancelAnimationFrame(this.loop);
      if (this.callback) {
        this.callback();
      }
      this.callback = null;
      return this.saved_poses;
    };

    JTSmoothSurface.prototype.animate_abs = function(positions, duration, animation_function, callback, cache_key) {
      var key, ref, val;
      if (animation_function == null) {
        animation_function = null;
      }
      if (callback == null) {
        callback = null;
      }
      if (cache_key == null) {
        cache_key = null;
      }
      if (!this.animating) {
        this.animating = true;
        this.last_frame = Date.now() - 16;
        if (callback) {
          this.callback = callback;
        }
        this.pos = 0;
        this.poses = {};
        ref = this.saved_poses;
        for (key in ref) {
          val = ref[key];
          switch (key) {
            case 'tx':
            case 'ty':
            case 'tz':
              this.poses[key] = positions[key] || positions[key] === 0 ? positions[key] - val : 0;
              break;
            case 'rx':
            case 'ry':
            case 'rz':
              this.poses[key] = positions[key] || positions[key] === 0 ? positions[key] - val : 0;
              break;
            case 'sx':
            case 'sy':
            case 'sz':
              this.poses[key] = positions[key] || positions[key] === 0 ? positions[key] : 1;
          }
        }
        return this.loop = requestAnimationFrame((function(_this) {
          return function() {
            return _this.animate_frame_abs(0, duration, animation_function, cache_key);
          };
        })(this));
      } else {
        return this.queue_abs.push({
          positions: positions,
          duration: duration,
          animation_function: animation_function,
          callback: callback
        });
      }
    };

    JTSmoothSurface.prototype.animate_frame_abs = function(time, duration, animation_function, cache_key) {
      var diff, frame, key, pos, pos_x, pos_y, pos_z, ref, rot_x, rot_y, rot_z, sca_x, sca_y, sca_z, transform_matrix, val;
      if (animation_function == null) {
        animation_function = null;
      }
      if (cache_key == null) {
        cache_key = null;
      }
      if (time <= duration) {
        frame = Date.now();
        diff = frame - this.last_frame;
        if (duration - time < 16) {
          time = duration;
        }
        if (diff > 15 || time === duration) {
          pos = this.get_pos(time, duration, animation_function);
          this.pos = pos;
          pos_x = this.saved_poses['tx'] + pos * this.poses['tx'];
          pos_y = this.saved_poses['ty'] + pos * this.poses['ty'];
          pos_z = this.saved_poses['tz'] + pos * this.poses['tz'];
          rot_x = this.saved_poses['rx'] + pos * this.poses['rx'];
          rot_y = this.saved_poses['ry'] + pos * this.poses['ry'];
          rot_z = this.saved_poses['rz'] + pos * this.poses['rz'];
          sca_x = this.saved_poses['sx'] + pos * (this.poses['sx'] - this.saved_poses['sx']);
          sca_y = this.saved_poses['sy'] + pos * (this.poses['sy'] - this.saved_poses['sy']);
          sca_z = this.saved_poses['sz'] + pos * (this.poses['sz'] - this.saved_poses['sz']);
          this.current = {
            tx: pos_x,
            ty: pos_y,
            tz: pos_z,
            rx: rot_x,
            ry: rot_y,
            rz: rot_z,
            sx: sca_x,
            sy: sca_y,
            sz: sca_z
          };
          transform_matrix = new JTMatrix(4);
          transform_matrix.scale(sca_x, sca_y, sca_z);
          transform_matrix.rotate(rot_x, rot_y, rot_z);
          transform_matrix.transform(pos_x, pos_y, pos_z);
          this.set_matrix(transform_matrix);
          this.apply_matrix();
          this.last_frame = frame;
          return this.loop = requestAnimationFrame((function(_this) {
            return function() {
              return _this.animate_frame_abs(time + diff, duration, animation_function, cache_key);
            };
          })(this));
        } else {
          return this.loop = requestAnimationFrame((function(_this) {
            return function() {
              return _this.animate_frame_abs(time, duration, animation_function, cache_key);
            };
          })(this));
        }
      } else {
        this.pos = 1;
        ref = this.poses;
        for (key in ref) {
          val = ref[key];
          switch (key) {
            case 'tx':
            case 'ty':
            case 'tz':
              this.saved_poses[key] = this.saved_poses[key] + val;
              break;
            case 'rx':
            case 'ry':
            case 'rz':
              this.saved_poses[key] = this.saved_poses[key] + val;
              break;
            case 'sx':
            case 'sy':
            case 'sz':
              this.saved_poses[key] = val;
          }
        }
        pos_x = this.saved_poses['tx'];
        pos_y = this.saved_poses['ty'];
        pos_z = this.saved_poses['tz'];
        rot_x = this.saved_poses['rx'];
        rot_y = this.saved_poses['ry'];
        rot_z = this.saved_poses['rz'];
        sca_x = this.saved_poses['sx'];
        sca_y = this.saved_poses['sy'];
        sca_z = this.saved_poses['sz'];
        this.current = {
          tx: pos_x,
          ty: pos_y,
          tz: pos_z,
          rx: rot_x,
          ry: rot_y,
          rz: rot_z,
          sx: sca_x,
          sy: sca_y,
          sz: sca_z
        };
        transform_matrix = new JTMatrix(4);
        transform_matrix.scale(sca_x, sca_y, sca_z);
        transform_matrix.rotate(rot_x, rot_y, rot_z);
        transform_matrix.transform(pos_x, pos_y, pos_z);
        this.set_matrix(transform_matrix);
        this.apply_matrix();
        this.animating = false;
        if (this.callback) {
          this.callback();
        }
        this.callback = null;
        return this.next_item_abs();
      }
    };

    JTSmoothSurface.prototype.get_pos = function(time, duration, animation_function) {
      var b, c, d, pos, t;
      if (animation_function == null) {
        animation_function = null;
      }
      b = 0;
      d = duration;
      c = 1;
      t = time;
      if (animation_function) {
        pos = animation_function(t, b, c, d);
      } else {
        pos = (t /= d / 2) < 1 ? c / 2 * t * t * t + b : c / 2 * ((t -= 2) * t * t + 2) + b;
      }
      return pos;
    };

    JTSmoothSurface.prototype.cache_positions = function(key, duration, animation_function) {
      var b, c, d, k, pos, ref, results, t, time;
      if (animation_function == null) {
        animation_function = null;
      }
      this.cache[key] = {};
      results = [];
      for (time = k = 0, ref = duration; 0 <= ref ? k <= ref : k >= ref; time = 0 <= ref ? ++k : --k) {
        b = 0;
        d = duration;
        c = 1;
        t = time;
        if (animation_function) {
          pos = animation_function(t, b, c, d);
        } else {
          pos = (t /= d / 2) < 1 ? c / 2 * t * t * t + b : c / 2 * ((t -= 2) * t * t + 2) + b;
        }
        pos = Math.round(pos * 100) / 100;
        results.push(this.cache[key][time] = pos);
      }
      return results;
    };

    JTSmoothSurface.prototype.get_cached_pos = function(key, time) {
      return this.cache[key][time];
    };

    JTSmoothSurface.prototype.set_size = function(size) {
      var size_x, size_y;
      this.saved_sizes = [this.j_elem.outerWidth(), this.j_elem.outerHeight()];
      size_x = size[0] || size[0] === 0 ? size[0] : this.saved_sizes[0];
      size_y = size[1] || size[1] === 0 ? size[1] : this.saved_sizes[1];
      this.current_size = [size_x, size_y];
      return this.j_elem.css({
        width: size_x,
        height: size_y
      });
    };

    JTSmoothSurface.prototype.animate_size = function(sizes, duration, animation_function, callback) {
      if (animation_function == null) {
        animation_function = null;
      }
      if (callback == null) {
        callback = null;
      }
      if (!this.animating_size) {
        this.animating_size = true;
        this.saved_sizes = this.current_size ? this.current_size : [this.j_elem.outerWidth(), this.j_elem.outerHeight()];
        if (callback) {
          this.size_callback = callback;
        }
        this.size_pos = 0;
        this.sizes = [];
        if (sizes[0] || sizes[0] === 0) {
          this.animate_x = true;
          this.sizes.push(sizes[0]);
        } else {
          this.animate_x = false;
          this.sizes.push(this.saved_sizes[0]);
        }
        if (sizes[1] || sizes[1] === 0) {
          this.animate_y = true;
          this.sizes.push(sizes[1]);
        } else {
          this.animate_y = false;
          this.sizes.push(this.saved_sizes[1]);
        }
        return this.size_loop = requestAnimationFrame((function(_this) {
          return function() {
            return _this.animate_size_frame(0, duration, animation_function);
          };
        })(this));
      } else {
        return this.queue_size.push({
          sizes: sizes,
          duration: duration,
          animation_function: animation_function,
          callback: callback
        });
      }
    };

    JTSmoothSurface.prototype.animate_size_frame = function(time, duration, animation_function) {
      var pos, size_x, size_y;
      if (animation_function == null) {
        animation_function = null;
      }
      if (time <= duration) {
        pos = this.get_pos(time, duration, animation_function);
        this.size_pos = pos;
        size_x = this.animate_x ? this.saved_sizes[0] + pos * (this.sizes[0] - this.saved_sizes[0]) : this.saved_sizes[0];
        size_y = this.animate_y ? this.saved_sizes[1] + pos * (this.sizes[1] - this.saved_sizes[1]) : this.saved_sizes[1];
        this.current_size = [size_x, size_y];
        this.j_elem.css({
          width: size_x,
          height: size_y
        });
        return this.size_loop = requestAnimationFrame((function(_this) {
          return function() {
            return _this.animate_size_frame(time + 32, duration, animation_function);
          };
        })(this));
      } else {
        if (this.animate_x) {
          this.saved_sizes[0] = this.saved_sizes[0] + this.sizes[0];
        }
        if (this.animate_y) {
          this.saved_sizes[1] = this.saved_sizes[1] + this.sizes[1];
        }
        this.animating_size = false;
        if (this.size_callback) {
          this.size_callback();
        }
        this.size_callback = null;
        return this.next_item_size();
      }
    };

    JTSmoothSurface.prototype.next_item_size = function() {
      var animation_function, callback, duration, ps, sizes;
      if (this.queue_size.length > 0) {
        ps = this.queue_size.shift();
        sizes = ps['sizes'];
        duration = ps['duration'];
        animation_function = ps['animation_function'];
        callback = ps['callback'];
        return this.animate_size(sizes, duration, animation_function, callback);
      }
    };

    JTSmoothSurface.prototype.pause_size = function() {
      this.animating_size = false;
      cancelAnimationFrame(this.size_loop);
      this.saved_sizes = this.current_size ? this.current_size : [this.j_elem.outerWidth(), this.j_elem.outerHeight()];
      if (this.size_callback) {
        this.size_callback();
      }
      return this.size_callback = null;
    };

    JTSmoothSurface.prototype.resize_limit = function(positions) {
      var key, limit_y, pos, pos_y, ref, ref1, results, transform_matrix, val;
      this.poses = {};
      this.saved_poses = {
        tx: 0,
        ty: 0,
        tz: 0,
        rx: 0,
        ry: 0,
        rz: 0,
        sx: 1,
        sy: 1,
        sz: 1
      };
      ref = this.saved_poses;
      for (key in ref) {
        val = ref[key];
        this.poses[key] = positions[key] || positions[key] === 0 ? positions[key] : val;
      }
      pos_y = this.poses['ty'];
      limit_y = this.limit_positions['ty'];
      if (limit_y) {
        if (pos_y < limit_y[0]) {
          this.poses['ty'] = limit_y[0];
          this.velocities['ty'] = 0;
        }
        if (pos_y > limit_y[1]) {
          this.poses['ty'] = limit_y[1];
          this.velocities['ty'] = 0;
        }
      }
      this.current = this.poses;
      if (this.position_change_function) {
        this.position_change_function(this.current);
      }
      transform_matrix = new JTMatrix(4);
      pos = 1;
      transform_matrix.scale(this.saved_poses['sx'], this.saved_poses['sy'], this.saved_poses['sz']);
      transform_matrix.rotate(this.saved_poses['rx'], this.saved_poses['ry'], this.saved_poses['rz']);
      transform_matrix.transform(this.saved_poses['tx'] + pos * this.poses['tx'], this.saved_poses['ty'] + pos * this.poses['ty'], this.saved_poses['tz'] + pos * this.poses['tz']);
      this.set_matrix(transform_matrix);
      this.apply_matrix();
      ref1 = this.poses;
      results = [];
      for (key in ref1) {
        val = ref1[key];
        switch (key) {
          case 'tx':
          case 'ty':
          case 'tz':
            results.push(this.saved_poses[key] = this.saved_poses[key] + val);
            break;
          case 'rx':
          case 'ry':
          case 'rz':
            results.push(this.saved_poses[key] = this.saved_poses[key] + val);
            break;
          case 'sx':
          case 'sy':
          case 'sz':
            results.push(this.saved_poses[key] = val);
            break;
          default:
            results.push(void 0);
        }
      }
      return results;
    };

    JTSmoothSurface.prototype.bind_position_change_function = function(f) {
      return this.position_change_function = f;
    };

    JTSmoothSurface.prototype.velocity = function(velocities, callback) {
      var key, ref, val;
      if (!this.animating_velocity) {
        this.animating_velocity = true;
        if (callback) {
          this.velocity_callback = callback;
        }
        this.velocity_pos = 0;
        this.velocities = {};
        ref = this.saved_velocities;
        for (key in ref) {
          val = ref[key];
          switch (key) {
            case 'tx':
            case 'ty':
            case 'tz':
              this.velocities[key] = velocities[key] || velocities[key] === 0 ? velocities[key] : val;
          }
        }
        return this.velocity_loop = requestAnimationFrame((function(_this) {
          return function() {
            return _this.animate_velocity_frame();
          };
        })(this));
      } else {
        return this.queue_velocities.push({
          velocities: velocities,
          callback: callback
        });
      }
    };

    JTSmoothSurface.prototype.set_limits = function(limit_positions) {
      return this.limit_positions = limit_positions;
    };

    JTSmoothSurface.prototype.animate_velocity_frame = function() {
      var interval_y, limit_y, next_y, pos_x, pos_y, pos_z, transform_matrix, vtx, vty, vtz;
      vtx = this.velocities['tx'];
      vty = this.velocities['ty'];
      vtz = this.velocities['tz'];
      if ((vtx !== 0) || (vty !== 0) || (vtz !== 0)) {
        next_y = vty - (Math.abs(vty - 1));
        interval_y = Math.abs(next_y) / next_y * 14;
        this.velocities['ty'] = (next_y < 1) && (next_y > -1) ? 0 : vty - interval_y;
        pos_x = this.saved_poses['tx'];
        pos_y = this.saved_poses['ty'] + this.velocities['ty'] / 60.0;
        pos_z = this.saved_poses['tz'];
        limit_y = this.limit_positions['ty'];
        if (limit_y) {
          if (pos_y < limit_y[0]) {
            pos_y = limit_y[0];
            this.velocities['ty'] = 0;
          }
          if (pos_y > limit_y[1]) {
            pos_y = limit_y[1];
            this.velocities['ty'] = 0;
          }
        }
        this.current['tx'] = pos_x;
        this.current['ty'] = pos_y;
        this.current['tz'] = pos_z;
        this.saved_poses = this.current;
        if (this.position_change_function) {
          this.position_change_function(this.saved_poses);
        }
        transform_matrix = new JTMatrix(4);
        transform_matrix.transform(pos_x, pos_y, pos_z);
        transform_matrix.scale(this.saved_poses['sx'], this.saved_poses['sy'], this.saved_poses['sz']);
        transform_matrix.rotate(this.saved_poses['rx'], this.saved_poses['ry'], this.saved_poses['rz']);
        this.set_matrix(transform_matrix);
        this.apply_matrix();
        return this.velocity_loop = requestAnimationFrame((function(_this) {
          return function() {
            return _this.animate_velocity_frame();
          };
        })(this));
      } else {
        this.animating_velocity = false;
        if (this.velocity_callback) {
          this.velocity_callback();
        }
        this.velocity_callback = null;
        return this.next_item_velocity();
      }
    };

    JTSmoothSurface.prototype.next_item_velocity = function() {
      var params;
      if (this.queue_velocities.length > 0) {
        params = this.queue_velocities.shift();
        return this.velocity(params['velocities'], params['callback']);
      }
    };

    JTSmoothSurface.prototype.pause_velocity = function() {
      this.animating_velocity = false;
      this.saved_poses = this.current;
      cancelAnimationFrame(this.velocity_loop);
      this.saved_velocities = {
        tx: 0,
        ty: 0,
        tz: 0
      };
      this.velocities = {
        tx: 0,
        ty: 0,
        tz: 0
      };
      if (this.velocity_callback) {
        this.velocity_callback();
      }
      this.velocity_callback = null;
      return this.saved_poses;
    };

    String.prototype.to_params = function() {
      return this.split("&").reduce((function(a, x) {
        var h;
        h = x.split("=");
        a[h[0]] = h[1];
        return a;
      }), {});
    };

    return JTSmoothSurface;

  })();

  String.prototype.pluralize = function(n) {
    if (n == null) {
      n = 0;
    }
    if (n === 1) {
      return this;
    } else {
      if (this[this.length - 1] === 'y') {
        return this.slice(0, +(this.length - 2) + 1 || 9e9) + "ies";
      } else {
        return this + "s";
      }
    }
  };

  String.prototype.singularize = function() {
    if (this.slice(this.length - 3, +(this.length - 1) + 1 || 9e9) === 'ies') {
      return this.slice(0, +(this.length - 4) + 1 || 9e9) + "y";
    } else if (this[this.length - 1] === 's') {
      return "" + this.slice(0, +(this.length - 2) + 1 || 9e9);
    } else {
      return this;
    }
  };

  String.prototype.kabob = function() {
    return this.replace(/[\s|_]+/g, "-");
  };

  Element.prototype.triangularize = function(dir) {
    var clip_string, elem, height, width;
    elem = jQuery(this);
    width = elem.width();
    height = elem.height();
    switch (dir) {
      case 'up':
        clip_string = "polygon(0px " + height + "px, " + (Math.round(width / 2.0)) + "px 0px, " + width + "px " + height + "px)";
        break;
      case 'down':
        clip_string = "polygon(0px 0px, " + (Math.round(width / 2.0)) + "px " + height + "px, " + width + "px 0px)";
        break;
      case 'left':
        clip_string = "polygon(0px " + (Math.round(height / 2.0)) + "px, " + width + "px 0px, " + width + "px " + height + "px)";
        break;
      case 'right':
        clip_string = "polygon(0px 0px, " + width + "px " + (Math.round(height / 2.0)) + "px, 0px " + height + "px)";
    }
    return elem.css({
      '-webkit-clip-path': clip_string,
      'clip-path': clip_string,
      overflow: 'hidden',
      'user-select': 'none',
      'pointer-events': 'pointer-events',
      'none': 'none'
    });
  };

  jQuery.easing.damp = (function(_this) {
    return function(x, t, b, c, d) {
      return JTCurve.damp(t, b, c, d);
    };
  })(this);

  window.requestFileSystem = window.webkitRequestFileSystem || window.mozRequestFileSystem || window.requestFileSystem;

  Utility = (function() {
    function Utility() {}

    Utility.time_test = function(f) {
      var diff, i, k, start;
      start = Date.now();
      for (i = k = 0; k <= 10000; i = ++k) {
        f();
      }
      diff = Date.now() - start;
      return console.log("Time to execute: " + diff);
    };

    return Utility;

  })();

  window.Utility = Utility;

  SpeedTest = (function() {
    function SpeedTest() {}

    SpeedTest.run = function() {
      var start_time, url, xhr;
      xhr = new XMLHttpRequest();
      url = "https://s3.amazonaws.com/static.frame.io/speedtest/100000B.jpg?n=" + (Math.random());
      xhr.open('GET', url, true);
      start_time = Date.now();
      (function(_this) {
        return (function(start_time) {
          return xhr.onload = function(e) {
            var duration, end_time, size, speedMbps;
            if (xhr.status === 200) {
              end_time = Date.now();
              duration = (end_time - start_time) / 1000.0;
              size = 100000;
              speedMbps = (((size * 8 / duration) / 1024.0) / 1024.0).toFixed(2);
              return alert("Your connection speed is: " + speedMbps + " Mbps\n");
            }
          };
        });
      })(this)(start_time);
      xhr.send();
      return true;
    };

    return SpeedTest;

  })();

  window.SpeedTest = SpeedTest;

  JTFileSystem = (function() {
    function JTFileSystem() {}

    JTFileSystem.get = function(name, url, callback) {
      return requestFileSystem(TEMPORARY, 4 * 1024 * 1024 * 1024, (function(_this) {
        return function(filesystem) {
          var xhr;
          xhr = new XMLHttpRequest;
          xhr.open('GET', url, true);
          xhr.responseType = 'blob';
          xhr.onload = function() {
            var res;
            res = xhr.response;
            return filesystem.root.getFile(name, {
              create: true
            }, function(fe) {
              return fe.createWriter(function(writer) {
                writer.onwriteend = function() {
                  return _this.handle_file_complete(name, callback);
                };
                return writer.write(res);
              });
            });
          };
          return xhr.send();
        };
      })(this));
    };

    JTFileSystem.handle_file_complete = function(name, callback) {
      return requestFileSystem(TEMPORARY, 4 * 1024 * 1024 * 1024, (function(_this) {
        return function(filesystem) {
          return filesystem.root.getFile(name, {}, function(fe) {
            return fe.file(function(file) {
              return callback(file);
            });
          });
        };
      })(this));
    };

    JTFileSystem.create_text_file = function(text, text_file) {
      var data, textFile;
      try {
        data = new Blob([text], {
          type: "text/plain;charset=utf-8"
        });
        if (JT.exists(text_file)) {
          window.URL.revokeObjectURL(text_file);
        }
        textFile = window.URL.createObjectURL(data);
      } catch (_error) {}
      return textFile;
    };

    return JTFileSystem;

  })();

  window.JTFileSystem = JTFileSystem;

  JTImage = (function() {
    function JTImage() {}

    JTImage.pixel_data = function(image, callback) {
      var img;
      img = jQuery("<img class='jt-image-temp-tag' width='100' height='100' />");
      img[0].src = image;
      img.load(function() {
        var canvas, d, height, hexs, k, ref, results, width;
        canvas = jQuery("<canvas style='position:absolute' width='100' height='100' />")[0];
        width = 100;
        height = 100;
        canvas.width = width;
        canvas.height = height;
        canvas.getContext('2d').drawImage(img[0], 0, 0, width, height);
        d = canvas.getContext('2d').getImageData(0, 0, width, height).data;
        hexs = (function() {
          results = [];
          for (var k = 0, ref = (width * height) - 1; 0 <= ref ? k <= ref : k >= ref; 0 <= ref ? k++ : k--){ results.push(k); }
          return results;
        }).apply(this).reduce((function(a, x) {
          a.push(JTImage.rgb_to_hex([d[x * 4], d[(x * 4) + 1], d[(x * 4) + 2]]));
          return a;
        }), []);
        delete img[0];
        img.remove();
        return callback(hexs);
      });
      return jQuery('body').prepend(img);
    };

    JTImage.histogram = function(hexes) {
      var hex, hist, key;
      hist = {};
      for (key in hexes) {
        hex = hexes[key];
        hist[hex] || (hist[hex] = 0);
        hist[hex] += 1;
      }
      return hist;
    };

    JTImage.top = function(hist, n) {
      var hex, i, k, keys, new_hist, new_result, ref, result, sorted;
      if (n == null) {
        n = 5;
      }
      keys = Object.keys(hist);
      new_hist = keys.reduce((function(a, x) {
        a.push([x, hist[x]]);
        return a;
      }), []);
      sorted = new_hist.sort(function(a, b) {
        if (a[1] < b[1]) {
          return 1;
        }
        if (a[1] >= b[1]) {
          return -1;
        }
      });
      result = [];
      new_result = [];
      for (i = k = 0, ref = n - 1; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
        hex = sorted[i] && sorted[i][0] ? sorted[i][0] : "000000";
        result.push(hex);
      }
      return result;
    };

    JTImage.to_hex = function(c) {
      var hex;
      hex = parseInt(c).toString(16);
      if (hex.length === 1) {
        return "0" + hex;
      } else {
        return hex;
      }
    };

    JTImage.rgb_to_hex = function(cs) {
      return this.to_hex(cs[0]) + this.to_hex(cs[1]) + this.to_hex(cs[2]);
    };

    return JTImage;

  })();

  window.JTImage = JTImage;

  JTImageCache = (function() {
    function JTImageCache() {
      this.img_to_data_url = bind(this.img_to_data_url, this);
      this.clear_cache = bind(this.clear_cache, this);
      this.cache = bind(this.cache, this);
      this.images = bind(this.images, this);
      this._images = {};
    }

    JTImageCache.prototype.images = function(link) {
      var image;
      if (!this._images[link]) {
        image = new Image();
        image.src = link;
        this._images[link] = image;
      }
      return this._images[link];
    };

    JTImageCache.prototype.cache = function(link) {
      var image;
      image = new Image();
      image.src = link;
      return this._images[link] = image;
    };

    JTImageCache.prototype.clear_cache = function() {
      return this._images = {};
    };

    JTImageCache.prototype.img_to_data_url = function(image, handler) {
      var img;
      img = new Image();
      img.onload = (function(_this) {
        return function() {
          var canvas, ctx, dataURL;
          console.log(_this);
          canvas = document.createElement("canvas");
          canvas.width = image.width;
          canvas.height = image.height;
          ctx = canvas.getContext("2d");
          ctx.drawImage(_this, 0, 0);
          return dataURL = canvas.toDataURL("image/png");
        };
      })(this);
      return img.src = image.src;
    };

    return JTImageCache;

  })();

  window.JTImageCache = JTImageCache;

  window.image_cache = new JTImageCache();

  JTDebug = (function() {
    function JTDebug() {}

    JTDebug.interlog = function(name, f, binded) {
      var i, k, len, line, lines, new_func, new_lines;
      lines = String(f).split("\n");
      new_lines = [];
      i = 0;
      for (k = 0, len = lines.length; k < len; k++) {
        line = lines[k];
        if (/\{/.test(line)) {
          new_lines.push(line.replace(/\{/, "{ \n console.log('logger position: " + i + "');"));
          i += 1;
        } else {
          new_lines.push(line);
        }
      }
      new_func = name + " = " + (new_lines.join("\n")) + ".bind(" + binded + ")";
      return eval(new_func);
    };

    return JTDebug;

  })();

  window.JTDebug = JTDebug;

  JT = (function() {
    function JT() {}

    JT.guid = function() {
      var r;
      r = function() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
      };
      return "" + (r()) + (r()) + "-" + (r()) + "-" + (r()) + "-" + (r()) + "-" + (r()) + (r()) + (r());
    };

    JT.includes = function(array, key) {
      return array.indexOf(key) !== -1;
    };

    JT.splice = function(s, i, l, ss) {
      if (ss == null) {
        ss = "";
      }
      return "" + (s.substring(0, i)) + ss + (s.substring(i + l));
    };

    JT.intersperse = function(a, s) {
      a = a.reduce((function(acc, x) {
        acc.push(x);
        acc.push(s);
        return acc;
      }), []);
      a.pop();
      return a;
    };

    JT.respond_to = function(object, function_name) {
      return (typeof object[function_name]) !== 'undefined';
    };

    JT.exists = function(object) {
      return (object || object === 0) && (typeof object) !== 'undefined' && object !== "JTNullValue";
    };

    JT.exists_string = function(object) {
      return this.exists(object) && !this.blank(object);
    };

    JT.exists_object = function(object) {
      return this.exists(object) && ((typeof object) === 'object') && Object.keys(object).length !== 0;
    };

    JT.exists_number = function(object) {
      return this.exists(object);
    };

    JT.exists_nonempty = function(object) {
      var object_exists;
      switch (true) {
        case (typeof object) === 'string':
          object_exists = this.exists_string(object);
          break;
        case (typeof object) === 'object':
          object_exists = this.exists_object(object);
          break;
        case (typeof object) === 'number':
          object_exists = this.exists_number(object);
      }
      if (object_exists) {
        return object_exists;
      } else {
        return false;
      }
    };

    JT.pad = function(n, width, z) {
      z = z || '0';
      n = n + '';
      if (n.length >= width) {
        return n;
      } else {
        return new Array(width - n.length + 1).join(z) + n;
      }
    };

    JT.strip = function(string) {
      string = string.replace(/(^\s*)|(\s*jQuery)/g, '');
      string = this.remove_excess_space(string);
      return string;
    };

    JT.remove_excess_space = function(string) {
      return string.replace(/\s+/g, ' ');
    };

    JT.remove_all_space = function(string) {
      return string.replace(/\s+/g, '');
    };

    JT.blank = function(string) {
      return /^\s*jQuery/.test(string);
    };

    JT.escape = function(v) {
      if (v && (typeof v) === 'string') {
        v = v.replace(/</g, "&lt;");
        v = v.replace(/>/g, "&gt;");
      }
      return v;
    };

    JT.is_hex = function(input) {
      var valid;
      input = this.strip(input).toLowerCase();
      valid = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];
      return (input.length === 6) && input.split("").reduce((function(a, x) {
        if (a && (indexOf.call(valid, x) >= 0)) {
          return true;
        } else {
          return false;
        }
      }), true);
    };

    JT.email_format = function(email) {
      return /.+@.+\.\w+/.test(email);
    };

    JT.array_equal = function(a1, a2) {
      var k, ref, results;
      if (!a1 || !a2) {
        return false;
      }
      if (a1.length !== a2.length) {
        return false;
      }
      return (function() {
        results = [];
        for (var k = 0, ref = a1.length - 1; 0 <= ref ? k <= ref : k >= ref; 0 <= ref ? k++ : k--){ results.push(k); }
        return results;
      }).apply(this).reduce((function(a, x) {
        if (a1[x] !== a2[x]) {
          a = false;
        }
        return a;
      }), true);
    };

    JT.to_params_string = function(obj) {
      return Object.keys(obj).reduce((function(a, x) {
        a.push(x + "=" + obj[x]);
        return a;
      }), []).join("&");
    };

    JT.merge = function(o1, o2) {
      return Object.keys(o2).reduce((function(a, x) {
        a[x] = o2[x];
        return a;
      }), Object.keys(o1).reduce((function(a, x) {
        a[x] = o1[x];
        return a;
      }), {}));
    };

    JT.window_or_max_width = function(max_width, padding) {
      var width, window_margin, window_width;
      if (padding == null) {
        padding = 0;
      }
      window_width = jQuery(window).width();
      window_margin = window_width - (padding * 2);
      width = window_margin < max_width ? window_margin : max_width;
      return width;
    };

    JT.window_or_max_height = function(max_height, padding) {
      var height, window_height, window_margin;
      if (padding == null) {
        padding = 0;
      }
      window_height = jQuery(window).height();
      window_margin = window_height - (padding * 2);
      height = window_margin < max_height ? window_margin : max_height;
      return height;
    };

    JT.pass_through_or_max_fit = function(width, height, max_width, max_height) {
      var a;
      if (width > max_width || height > max_height) {
        a = this.contain(width, height, max_width, max_height);
        width = a[0];
        height = a[1];
      }
      width = Math.round(width);
      height = Math.round(height);
      return [width, height];
    };

    JT.contain = function(width, height, target_width, target_height) {
      var new_height, new_width, source_aspect, target_aspect;
      source_aspect = parseFloat(width) / parseFloat(height);
      target_aspect = parseFloat(target_width) / parseFloat(target_height);
      if (source_aspect <= target_aspect) {
        new_height = target_height;
        new_width = width * new_height / height;
      } else {
        new_width = target_width;
        new_height = height * new_width / width;
      }
      new_width = Math.round(new_width);
      new_height = Math.round(new_height);
      return [new_width, new_height];
    };

    JT.cover = function(width, height, target_width, target_height) {
      var new_height, new_width, source_aspect, target_aspect;
      source_aspect = parseFloat(width) / parseFloat(height);
      target_aspect = parseFloat(target_width) / parseFloat(target_height);
      if (source_aspect >= target_aspect) {
        new_height = target_height;
        new_width = width * new_height / height;
      } else {
        new_width = target_width;
        new_height = height * new_width / width;
      }
      new_width = Math.round(new_width);
      new_height = Math.round(new_height);
      return [new_width, new_height];
    };

    JT.is_chrome = function() {
      return !!window.chrome;
    };

    JT.is_safari = function() {
      return navigator.userAgent.indexOf('Safari') !== -1;
    };

    JT.is_mobile = function() {
      return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    };

    JT.is_android = function() {
      return navigator.userAgent.toLowerCase().indexOf('android') !== -1;
    };

    JT.is_iphone = function() {
      return /iPhone|iPad/i.test(navigator.userAgent);
    };

    JT.monospace = function(string, classname) {
      return string.split("").map((function(_this) {
        return function(x) {
          return "<div class='" + classname + "'>" + x + "</div>";
        };
      })(this)).join("");
    };

    return JT;

  })();

  window.JT = JT;

  JTConstants = (function() {
    function JTConstants() {}

    JTConstants.LEFT_SHELF_SIZE = 242;

    JTConstants.RIGHT_SHELF_SIZE = 242;

    return JTConstants;

  })();

  window.JTConstants = JTConstants;

  JTKeyTester = (function() {
    function JTKeyTester() {
      this.execute_key = bind(this.execute_key, this);
      this.bind_key = bind(this.bind_key, this);
      this.key_hash = {};
    }

    JTKeyTester.prototype.bind_key = function(key, f) {
      return this.key_hash[key] = f;
    };

    JTKeyTester.prototype.execute_key = function(key) {
      var f;
      f = this.key_hash[key];
      if (f) {
        return f();
      }
    };

    return JTKeyTester;

  })();

  window.JTKeyTester = JTKeyTester;

  JTFormats = (function() {
    function JTFormats() {}

    JTFormats.VIDEO = 1;

    JTFormats.AUDIO = 2;

    JTFormats.IMAGE = 4;

    JTFormats.ARCHIVE = 8;

    JTFormats.DOC = 0;

    JTFormats.is_video = function(format) {
      if (format & JTFormats.VIDEO) {
        return true;
      } else {
        return false;
      }
    };

    JTFormats.is_audio = function(format) {
      if (format & JTFormats.AUDIO) {
        return true;
      } else {
        return false;
      }
    };

    JTFormats.is_image = function(format) {
      if (format & JTFormats.IMAGE) {
        return true;
      } else {
        return false;
      }
    };

    JTFormats.is_archive = function(format) {
      if (format & JTFormats.ARCHIVE) {
        return true;
      } else {
        return false;
      }
    };

    JTFormats.is_doc = function(format) {
      return !JTFormats.is_video(format) && !JTFormats.is_audio(format) && !JTFormats.is_image(format) && !JTFormats.is_archive(format);
    };

    JTFormats.format = function(string) {
      var f;
      f = JTFormats.formats[JTFormats.trim(string.toLowerCase())];
      if (f) {
        return f;
      } else {
        return 0;
      }
    };

    JTFormats.formats = {
      'webm': 1,
      'mkv': 1,
      'flv': 1,
      'ogv': 1,
      'ogg': 1,
      'drc': 1,
      'mng': 1,
      'avi': 1,
      'mov': 1,
      'qt': 1,
      'wmv': 1,
      'rm': 1,
      'rmvb': 1,
      'asf': 1,
      'mp4': 1,
      'm4p ': 1,
      'm4v': 1,
      'mpg': 1,
      'mp2': 1,
      'mpeg': 1,
      'mpe': 1,
      'mpv': 1,
      'm2v': 1,
      'svi': 1,
      '3gp': 1,
      '3g2': 1,
      'mxf': 1,
      'roq': 1,
      'nsv': 1,
      'quicktime': 1,
      'act': 2,
      'aiff': 2,
      'aac': 2,
      'amr': 2,
      'au': 2,
      'awb': 2,
      'dct': 2,
      'dss': 2,
      'dvf': 2,
      'flac': 2,
      'gsm': 2,
      'iklax': 2,
      'ivs': 2,
      'm4a': 2,
      'mmf': 2,
      'mp3': 2,
      'mpc': 2,
      'msv': 2,
      'ogg': 2,
      'oga': 2,
      'opus': 2,
      'ra': 2,
      'rm': 2,
      'tta': 2,
      'vox': 2,
      'wav': 2,
      'wma': 2,
      'wv': 2,
      'ani': 4,
      'anim': 4,
      'apng': 4,
      'art': 4,
      'bmp': 4,
      'bsave': 4,
      'cal': 4,
      'cin': 4,
      'cpc': 4,
      'cpt': 4,
      'dpx': 4,
      'ecw': 4,
      'exr': 4,
      'fits': 4,
      'flic': 4,
      'fpx': 4,
      'gif': 4,
      'hdri': 4,
      'hevc': 4,
      'icer': 4,
      'icns': 4,
      'ico': 4,
      'cur': 4,
      'ics': 4,
      'ilbm': 4,
      'jbig': 4,
      'jbig2': 4,
      'jng': 4,
      'jpg': 4,
      'jpeg': 4,
      'xr': 4,
      'mng': 4,
      'miff': 4,
      'pam': 4,
      'pbm': 4,
      'pgm': 4,
      'ppm': 4,
      'pnm': 4,
      'pcx': 4,
      'pgf': 4,
      'pictor': 4,
      'png': 4,
      'psd': 4,
      'psb': 4,
      'psp': 4,
      'qtvr': 4,
      'ras': 4,
      'rbe': 4,
      'logluv': 4,
      'tif': 4,
      'sgi': 4,
      'tga': 4,
      'tiff': 4,
      'tiffep': 4,
      'tiffit': 4,
      'wbmp': 4,
      'webp': 4,
      'xbm': 4,
      'xcf': 4,
      'xpm': 4,
      'xwd': 4,
      'ciff': 4,
      'dng': 4,
      'ai': 4,
      'cdr': 4,
      'cgm': 4,
      'dxf': 4,
      'eva': 4,
      'emf': 4,
      'gerber': 4,
      'hvif': 4,
      'iges': 4,
      'pgml': 4,
      'svg': 4,
      'vml': 4,
      'wmf': 4,
      'xar': 4,
      'cdf': 4,
      'djvu': 4,
      'eps': 4,
      'pict': 4,
      'ps': 4,
      'swf': 4,
      'xaml': 4,
      '3fr': 4,
      'arw': 4,
      'cr2': 4,
      'crw': 4,
      'dcr': 4,
      'erf': 4,
      'jog': 4,
      'kdc': 4,
      'mdc': 4,
      'mef': 4,
      'mos': 4,
      'mrw': 4,
      'nef': 4,
      'nrw': 4,
      'orf': 4,
      'pef': 4,
      'raf': 4,
      'raw': 4,
      'rw2': 4,
      'sr2': 4,
      'srw': 4,
      'x3f': 4,
      'x-canon-crw': 4,
      'x-adobe-dng': 4,
      'x-epson-erf': 4,
      'x-nikon-nrw': 4,
      'x-sony-sr2': 4,
      'vnd.adobe.photoshop': 4,
      'ar': 8,
      'cpio': 8,
      'shar': 8,
      'tar': 8,
      'lbr': 8,
      'bagit': 8,
      'bzip2': 8,
      'gzip': 8,
      'lzip': 8,
      'lzma': 8,
      'lzop': 8,
      'xz': 8,
      'sq': 8,
      'compress': 8,
      '7z': 8,
      'ace': 8,
      'arc': 8,
      'arj': 8,
      'b1': 8,
      'cabinet': 8,
      'cf': 8,
      'cpt': 8,
      'dgca': 8,
      'dmg': 8,
      'egg': 8,
      'gca': 8,
      'kgb': 8,
      'lha': 8,
      'lzx': 8,
      'mpq': 8,
      'pea': 8,
      'qda': 8,
      'rar': 8,
      'rzip': 8,
      'sit': 8,
      'sqx': 8,
      'uda': 8,
      'uharc': 8,
      'xar': 8,
      'zoo': 8,
      'zip': 8
    };

    JTFormats.trim = function(input) {
      return input.split('/').pop();
    };

    return JTFormats;

  })();

  window.JTFormats = JTFormats;

  JTSVG = (function() {
    function JTSVG() {}

    JTSVG.lock = function() {
      var svg;
      svg = "<svg style='pointer-events:none' width=\"20px\" height=\"20px\" viewBox=\"0 0 20 20\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n	<path\n	style=\"fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0\"\n	d=\"M 10 0 C 6.6862915 0 4 2.6862915 4 6 L 4 9 L 3 9 L 3 20 L 17 20 L 17 9 L 16 9 L 16 6 C 16 2.6862915 13.313708 0 10 0 z M 10 2 C 12.209139 2 14 3.7908602 14 6 L 14 9 L 6 9 L 6 6 C 6 3.7908602 7.790861 2 10 2 z \"/>\n</svg>";
      return svg;
    };

    JTSVG.lock2 = function(color) {
      var svg;
      if (color == null) {
        color = null;
      }
      if (!color) {
        color = "white";
      }
      svg = "<svg style='pointer-events:none' width=\"32px\" height=\"32px\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\">\n	<g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n		<g id=\"lock\" sketch:type=\"MSArtboardGroup\" fill=\"" + color + "\">\n			<rect id=\"Rectangle-1\" sketch:type=\"MSShapeGroup\" x=\"9.9152832\" y=\"15.3726849\" width=\"12.1694336\" height=\"8.25463018\" rx=\"2\"></rect>\n			<path d=\"M11.1720422,14.2310105 L12.8980915,14.2310105 C13.2997912,14.2310105 13.2518444,13.8424394 13.2518439,13.7762985 C13.2518216,11.0046567 15.1285791,10.5042483 15.9999429,10.5042483 C16.9459685,10.5042483 18.7703841,10.9209177 18.7703844,13.7762985 C18.7703844,14.2125462 18.9178392,14.2310105 19.1083044,14.2310105 C19.7279183,14.2310105 20.3374774,14.2310105 20.9470366,14.2310105 C21.288033,14.2310105 21.2247786,13.8328959 21.2247786,13.5975206 C21.2247786,10.7119235 18.8855399,8.37268491 15.9999429,8.37268491 C13.1143458,8.37268491 10.7751072,10.7119235 10.7751072,13.5975206 C10.7751072,13.9032781 10.6989466,14.2310105 11.1720422,14.2310105 Z\" id=\"Oval-1\" sketch:type=\"MSShapeGroup\"></path>\n		</g>\n	</g>\n</svg>";
      return svg;
    };

    JTSVG.centered_circle = function(width, height, diameter, color) {
      var svg, x, y;
      if (width == null) {
        width = 20;
      }
      if (height == null) {
        height = 20;
      }
      if (diameter == null) {
        diameter = 10;
      }
      if (color == null) {
        color = 'white';
      }
      x = (width - diameter) / 2.0;
      y = (height - diameter) / 2.0;
      svg = "<svg style='pointer-events:none; position:absolute;left:0px;top:0px;' width=\"" + width + "px\" height=\"" + height + "px\" viewBox=\"0 0 " + width + " " + height + "\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n	<g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n		<g id=\"three-dots\" sketch:type=\"MSArtboardGroup\" fill=\"" + color + "\">	\n			<rect id=\"dot-1\" sketch:type=\"MSShapeGroup\" x=\"" + x + "\" y=\"" + y + "\" width=\"" + diameter + "\" height=\"" + diameter + "\" rx=\"" + (diameter * 10) + "\"></rect>\n		</g>\n	</g>\n</svg>";
      return svg;
    };

    JTSVG.polar_to_cartesian = function(centerX, centerY, radius, angleInDegrees) {
      var angleInRadians, x, y;
      angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;
      x = centerX + (radius * Math.cos(angleInRadians));
      y = centerY + (radius * Math.sin(angleInRadians));
      return {
        x: x,
        y: y
      };
    };

    JTSVG.describe_arc = function(x, y, radius, startAngle, endAngle) {
      var arcSweep, d, end, start;
      start = JTSVG.polar_to_cartesian(x, y, radius, endAngle);
      end = JTSVG.polar_to_cartesian(x, y, radius, startAngle);
      arcSweep = endAngle - startAngle <= 180 ? "0" : "1";
      d = ["M", start.x, start.y, "A", radius, radius, 0, arcSweep, 0, end.x, end.y].join(" ");
      return d;
    };

    JTSVG.gradient_circle = function(width, height, radius, steps, step_offset, stroke_width) {
      var actual_radius, center_x, center_y, end_angle, k, opacity, path_style, ref, start_angle, step, step_opacity, step_size, svg;
      if (step_offset == null) {
        step_offset = 2;
      }
      if (stroke_width == null) {
        stroke_width = 4;
      }
      step_size = 360.0 / steps;
      step_opacity = 1 / (steps - step_offset);
      svg = "<svg width='" + width + "px' height='" + height + "px'>";
      center_x = width / 2;
      center_y = height / 2;
      start_angle = 0;
      opacity = 0;
      actual_radius = radius - stroke_width;
      for (step = k = 0, ref = steps - 1; 0 <= ref ? k <= ref : k >= ref; step = 0 <= ref ? ++k : --k) {
        end_angle = start_angle + step_size;
        path_style = "fill='none' stroke='rgba(255,255,255," + opacity + ")' stroke-width='" + stroke_width + "'";
        svg += "<path " + path_style + " d='" + (JTSVG.describe_arc(center_x, center_y, actual_radius, start_angle, end_angle)) + "'  />";
        start_angle = end_angle;
        if (step >= step_offset) {
          opacity += step_opacity;
        }
        if (start_angle >= 360 - step_size) {
          stroke_width -= 1;
        }
      }
      svg += "</svg>";
      return svg;
    };

    JTSVG.blocks = function(count, width, height, spacing, skew, offset, color) {
      var DEFAULT_COLOR, DEFAULT_COUNT, DEFAULT_HEIGHT, DEFAULT_OFFSET, DEFAULT_SKEW, DEFAULT_SPACING, DEFAULT_WIDTH, i, k, ref, svg, total_width, x, y;
      if (count == null) {
        count = null;
      }
      if (width == null) {
        width = null;
      }
      if (height == null) {
        height = null;
      }
      if (spacing == null) {
        spacing = null;
      }
      if (skew == null) {
        skew = null;
      }
      if (offset == null) {
        offset = null;
      }
      if (color == null) {
        color = null;
      }
      DEFAULT_COUNT = 10;
      DEFAULT_WIDTH = 10;
      DEFAULT_HEIGHT = 10;
      DEFAULT_SPACING = 10;
      DEFAULT_SKEW = 4;
      DEFAULT_COLOR = 'white';
      DEFAULT_OFFSET = 0;
      count = count ? count : DEFAULT_COUNT;
      width = width ? width : DEFAULT_WIDTH;
      height = height ? height : DEFAULT_HEIGHT;
      spacing = spacing ? spacing : DEFAULT_SPACING;
      skew = skew ? skew : DEFAULT_SKEW;
      color = color ? color : DEFAULT_COLOR;
      offset = offset ? offset : DEFAULT_OFFSET;
      total_width = count * width + ((count - 1) * spacing);
      svg = "<svg style='position:absolute; left:0px; top:0px' width=\"" + total_width + "px\" height=\"" + height + "px\" viewBox=\"0 0 " + total_width + " " + height + "\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\">";
      x = -width + offset;
      y = 0;
      for (i = k = 0, ref = count - 1; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
        svg += "<path d=\"M" + x + "," + y + " L" + (x + width) + "," + y + " L" + (x + width + skew) + "," + (y + height) + " L" + (x + skew) + "," + (y + height) + " L" + x + "," + y + " Z\" fill=\"" + color + "\" ></path>";
        x += width + spacing;
      }
      svg += "</svg>";
      return svg;
    };

    JTSVG.three_dots = function(width, height, diameter, spacing, color) {
      var DEFAULT_DIAMETER, DEFAULT_HEIGHT, DEFAULT_SPACING, DEFAULT_WIDTH, dot_width, start_x, start_y, svg, x1, x2, x3, y;
      if (width == null) {
        width = null;
      }
      if (height == null) {
        height = null;
      }
      if (diameter == null) {
        diameter = null;
      }
      if (spacing == null) {
        spacing = null;
      }
      if (color == null) {
        color = null;
      }
      DEFAULT_WIDTH = 20;
      DEFAULT_HEIGHT = 20;
      DEFAULT_DIAMETER = 4;
      DEFAULT_SPACING = 2;
      width = width ? width : DEFAULT_WIDTH;
      height = height ? height : DEFAULT_HEIGHT;
      diameter = diameter ? diameter : DEFAULT_DIAMETER;
      spacing = spacing ? spacing : DEFAULT_SPACING;
      dot_width = (diameter * 3) + (spacing * 2);
      start_x = (width - dot_width) / 2.0;
      start_y = (height - diameter) / 2.0;
      x1 = start_x;
      x2 = x1 + diameter + spacing;
      x3 = x2 + diameter + spacing;
      y = start_y;
      if (!color) {
        color = "white";
      }
      svg = "<svg style='pointer-events:none;' width=\"" + width + "px\" height=\"" + height + "px\" viewBox=\"0 0 " + width + " " + height + "\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n	<g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n		<g id=\"three-dots\" sketch:type=\"MSArtboardGroup\" fill=\"" + color + "\">	\n			<rect id=\"dot-1\" sketch:type=\"MSShapeGroup\" x=\"" + x1 + "\" y=\"" + y + "\" width=\"" + diameter + "\" height=\"" + diameter + "\" rx=\"" + (diameter * 10) + "\"></rect>\n			<rect id=\"dot-2\" sketch:type=\"MSShapeGroup\" x=\"" + x2 + "\" y=\"" + y + "\" width=\"" + diameter + "\" height=\"" + diameter + "\" rx=\"" + (diameter * 10) + "\"></rect>\n			<rect id=\"dot-3\" sketch:type=\"MSShapeGroup\" x=\"" + x3 + "\" y=\"" + y + "\" width=\"" + diameter + "\" height=\"" + diameter + "\" rx=\"" + (diameter * 10) + "\"></rect>\n		</g>\n	</g>\n</svg>";
      return svg;
    };

    JTSVG.pointer = function(orientation, color) {
      var svg;
      if (orientation == null) {
        orientation = 'top';
      }
      if (color == null) {
        color = null;
      }
      if (!color) {
        color = "white";
      }
      switch (orientation) {
        case 'top':
          svg = "<svg style='position:absolute;left:0px;top:0px;border-bottom:1px solid " + color + "'  width=\"24px\" height=\"12px\" viewBox=\"0 0 24 12\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\">\n	<g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n		<g id=\"arrow-up\" sketch:type=\"MSArtboardGroup\" fill=\"" + color + "\">\n			<path d=\"M3.00878906,10.0687253 C5.00805664,8.13745024 10.6938076,1.51227455 10.6938076,1.51227455 C11.4151978,0.677068376 12.5812275,0.676411401 13.302443,1.5122746 C13.302443,1.5122746 18.9676514,8.13745059 20.9993896,10.0687252 C23.0311279,11.9999998 23.5650024,11.9999998 24,12 L0,12 C0,12 1.00952148,12.0000004 3.00878906,10.0687253 Z\" id=\"Triangle-1\" sketch:type=\"MSShapeGroup\"></path>\n		</g>\n	</g>\n</svg>";
          break;
        case 'bottom':
          svg = "<svg style='position:absolute;left:0px;top:0px;border-top:1px solid " + color + "' width=\"24px\" height=\"12px\" viewBox=\"0 0 24 12\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\">\n	<g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n		<g id=\"arrow-up\" sketch:type=\"MSArtboardGroup\" fill=\"" + color + "\">\n			<path d=\"M3.00878906,9.18310177 C5.00805664,7.25182671 10.6938076,0.62665101 10.6938076,0.62665101 C11.4151978,-0.208555159 12.5812275,-0.209212134 13.302443,0.626651063 C13.302443,0.626651063 18.9676514,7.25182705 20.9993896,9.18310165 C23.0311279,11.1143762 23.5650024,11.1143763 24,11.1143765 L0,11.1143765 C0,11.1143765 1.00952148,11.1143768 3.00878906,9.18310177 Z\" id=\"Triangle-1\" sketch:type=\"MSShapeGroup\" transform=\"translate(12.000000, 5.557188) scale(1, -1) translate(-12.000000, -5.557188) \"></path>\n		</g>\n	</g>\n</svg>";
          break;
        case 'right':
          svg = "<svg style='position:absolute;left:0px;top:0px;' width=\"10px\" height=\"20px\" viewBox=\"0 0 10 20\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\">\n	<g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n		<g id=\"arrow-side\" sketch:type=\"MSArtboardGroup\" fill=\"" + color + "\">\n			<path d=\"M-2.92382546,12.8700625 C-1.22159168,11.2257195 3.42450242,5.80963301 3.42450242,5.80963301 C4.14636459,4.97437296 5.31250921,4.97312149 6.03493366,5.80963307 C6.03493366,5.80963307 10.6640078,11.2257198 12.3938881,12.8700624 C14.1237683,14.514405 14.5783244,14.514405 14.9486938,14.5144052 L-5.4855948,14.5144052 C-5.4855948,14.5144052 -4.62605924,14.5144055 -2.92382546,12.8700625 Z\" id=\"Triangle-2\" sketch:type=\"MSShapeGroup\" transform=\"translate(4.731550, 9.782856) scale(1, -1) rotate(90.000000) translate(-4.731550, -9.782856) \"></path>\n		</g>\n	</g>\n</svg>";
          break;
        case 'left':
          svg = "<svg style='position:absolute;left:0px;top:0px;' width=\"10px\" height=\"20px\" viewBox=\"0 0 10 20\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\">\n	<g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n		<g id=\"arrow-side\" sketch:type=\"MSArtboardGroup\" fill=\"" + color + "\">\n			<path d=\"M-2.16056696,13.0215946 C-0.49451064,11.4121987 4.02248331,6.14620551 4.02248331,6.14620551 C4.74576951,5.3093752 5.91166061,5.30518273 6.63807815,6.14620556 C6.63807815,6.14620556 11.138485,11.412199 12.8316002,13.0215945 C14.5247154,14.63099 14.9696109,14.63099 15.3321088,14.6309902 L-4.66789117,14.6309902 C-4.66789117,14.6309902 -3.82662327,14.6309905 -2.16056696,13.0215946 Z\" id=\"Triangle-2\" sketch:type=\"MSShapeGroup\" transform=\"translate(5.332109, 10.000000) scale(1, -1) rotate(-90.000000) translate(-5.332109, -10.000000) \"></path>\n		</g>\n	</g>\n</svg>";
      }
      return svg;
    };

    JTSVG.x = function(color) {
      var svg;
      if (color == null) {
        color = null;
      }
      if (!color) {
        color = "black";
      }
      svg = "<svg width=\"28px\" height=\"28px\" viewBox=\"0 0 28 28\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\">\n	<g id=\"Page-1\" stroke=\"none\" stroke-width=\"2\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n		<g id=\"checks-xs\" sketch:type=\"MSArtboardGroup\" stroke=\"" + color + "\">\n			<path d=\"M6.05786133,6.04443359 L22.0515137,22.0212402\" id=\"Path-2\" sketch:type=\"MSShapeGroup\"></path>\n			<path d=\"M6.05175781,21.9709473 L22.0827637,5.94482422\" id=\"Path-3\" sketch:type=\"MSShapeGroup\"></path>\n		</g>\n	</g>\n</svg>";
      return svg;
    };

    JTSVG.x_custom = function(width, height, padding, color) {
      var DEFAULT_COLOR, DEFAULT_HEIGHT, DEFAULT_PADDING, DEFAULT_WIDTH, p1x1, p1x2, p1y1, p1y2, p2x1, p2x2, p2y1, p2y2, svg;
      if (width == null) {
        width = null;
      }
      if (height == null) {
        height = null;
      }
      if (padding == null) {
        padding = null;
      }
      if (color == null) {
        color = null;
      }
      DEFAULT_WIDTH = 20;
      DEFAULT_HEIGHT = 20;
      DEFAULT_PADDING = 10;
      DEFAULT_COLOR = "black";
      width = width ? width : DEFAULT_WIDTH;
      height = height ? height : DEFAULT_HEIGHT;
      padding = padding ? padding : DEFAULT_PADDING;
      color = color ? color : DEFAULT_COLOR;
      p1x1 = padding;
      p1y1 = padding;
      p1x2 = width - padding;
      p1y2 = height - padding;
      p2x1 = padding;
      p2y1 = height - padding;
      p2x2 = width - padding;
      p2y2 = padding;
      svg = "<svg style='pointer-events:none;' width=\"" + width + "px\" height=\"" + height + "px\" viewBox=\"0 0 " + width + " " + height + "\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\">\n	<g id=\"Page-1\" stroke=\"none\" stroke-width=\"2\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n		<g id=\"checks-xs\" sketch:type=\"MSArtboardGroup\" stroke=\"" + color + "\">\n			<path d=\"M" + p1x1 + "," + p1y1 + " L" + p1x2 + "," + p1y2 + "\" id=\"Path-2\" sketch:type=\"MSShapeGroup\"></path>\n			<path d=\"M" + p2x1 + "," + p2y1 + " L" + p2x2 + "," + p2y2 + "\" id=\"Path-3\" sketch:type=\"MSShapeGroup\"></path>\n		</g>\n	</g>\n</svg>";
      return svg;
    };

    JTSVG.disclosure_down = function(width, height, padding_x, padding_y, color) {
      var DEFAULT_COLOR, DEFAULT_HEIGHT, DEFAULT_PADDING_X, DEFAULT_PADDING_Y, DEFAULT_WIDTH, p1x1, p1x2, p1x3, p1y1, p1y2, p1y3, svg;
      if (width == null) {
        width = null;
      }
      if (height == null) {
        height = null;
      }
      if (padding_x == null) {
        padding_x = null;
      }
      if (padding_y == null) {
        padding_y = null;
      }
      if (color == null) {
        color = null;
      }
      DEFAULT_WIDTH = 20;
      DEFAULT_HEIGHT = 20;
      DEFAULT_PADDING_X = 0;
      DEFAULT_PADDING_Y = 0;
      DEFAULT_COLOR = "white";
      width = width ? width : DEFAULT_WIDTH;
      height = height ? height : DEFAULT_HEIGHT;
      padding_x = padding_x ? padding_x : DEFAULT_PADDING_X;
      padding_y = padding_y ? padding_y : DEFAULT_PADDING_Y;
      color = color ? color : DEFAULT_COLOR;
      p1x1 = padding_x;
      p1y1 = padding_y;
      p1x2 = width / 2.0;
      p1y2 = height - padding_y;
      p1x3 = width - padding_x;
      p1y3 = padding_y;
      svg = "<svg style='pointer-events:none;' width=\"" + width + "px\" height=\"" + height + "px\" viewBox=\"0 0 " + width + " " + height + "\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\">\n	<g id=\"Page-1\" stroke=\"none\" stroke-width=\"2\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n		<g id=\"checks-xs\" sketch:type=\"MSArtboardGroup\" stroke=\"" + color + "\">\n			<path d=\"M" + p1x1 + "," + p1y1 + " L" + p1x2 + "," + p1y2 + " L" + p1x3 + "," + p1y3 + "\" id=\"Path-2\" sketch:type=\"MSShapeGroup\"></path>\n		</g>\n	</g>\n</svg>";
      return svg;
    };

    JTSVG.pointer_small = function(orientation, color) {
      var svg;
      if (orientation == null) {
        orientation = 'top';
      }
      if (color == null) {
        color = null;
      }
      if (!color) {
        color = "white";
      }
      switch (orientation) {
        case 'top':
          svg = "Not implemented";
          break;
        case 'bottom':
          svg = "<svg style='position:absolute;left:0px;top:0px;' width=\"16px\" height=\"8px\" viewBox=\"0 0 16 8\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\">\n	<g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n		<g id=\"arrow-up-small\" sketch:type=\"MSArtboardGroup\" fill=\"" + color + "\">\n			<path d=\"M2.00585938,6.60989075 C3.33870443,5.21978123 6.75081217,0.92180851 6.75081217,0.92180851 C7.44071956,0.0606474033 8.55501219,0.0593146536 9.24580969,0.921808561 C9.24580969,0.921808561 12.6451009,5.21978148 13.9995931,6.60989066 C15.3540853,7.99999984 15.7100016,7.99999986 16,8 L0,8 C0,8 0.673014323,8.00000027 2.00585938,6.60989075 Z\" id=\"Triangle-1\" sketch:type=\"MSShapeGroup\" transform=\"translate(8.000000, 4.000000) scale(1, -1) translate(-8.000000, -4.000000) \"></path>\n		</g>\n	</g>\n</svg>";
          break;
        case 'right':
          svg = "Not implemented";
          break;
        case 'left':
          svg = "Not implemented";
      }
      return svg;
    };

    JTSVG.check = function(color) {
      var svg;
      if (color == null) {
        color = null;
      }
      if (!color) {
        color = "#60cea1";
      }
      svg = "<svg width=\"28px\" height=\"28px\" viewBox=\"0 0 28 28\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\">\n	<g id=\"Page-1\" stroke=\"none\" stroke-width=\"2\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n		<g id=\"checks-xs\" sketch:type=\"MSArtboardGroup\" stroke=\"" + color + "\">\n			<path d=\"M5.35620117,14.9249268 L10.7441406,20.057251 L22.6437988,7.94274902\" id=\"Path-1\" sketch:type=\"MSShapeGroup\"></path>\n		</g>\n	</g>\n</svg>";
      return svg;
    };

    return JTSVG;

  })();

  JTCurve = (function() {
    function JTCurve() {}

    JTCurve.elastic = function(t, b, c, d) {
      var a, p, s;
      s = 0.01;
      p = 0;
      a = c;
      if (t === 0) {
        return b;
      }
      if ((t /= d) === 1) {
        return b + c;
      }
      if (!p) {
        p = d * .3;
      }
      if (a < Math.abs(c)) {
        a = c;
        s = p / 4;
      } else {
        s = p / (2 * Math.PI) * Math.asin(c / a);
      }
      return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
    };

    JTCurve.elastic2 = function(t, b, c, d) {
      var tc, ts;
      ts = (t /= d) * t;
      tc = ts * t;
      return b + c * (-8.1525 * tc * ts + 28.5075 * ts * ts + -35.105 * tc + 16 * ts + -0.25 * t);
    };

    JTCurve.easeOutBounce = function(t, b, c, d) {
      if ((t /= d) < (1 / 2.75)) {
        return c * (7.5625 * t * t) + b;
      } else if (t < (2 / 2.75)) {
        return c * (7.5625 * (t -= 1.5 / 2.75) * t + .75) + b;
      } else if (t < (2.5 / 2.75)) {
        return c * (7.5625 * (t -= 2.25 / 2.75) * t + .9375) + b;
      } else {
        return c * (7.5625 * (t -= 2.625 / 2.75) * t + .984375) + b;
      }
    };

    JTCurve.backInOut = function(time, begin, change, duration, overshoot) {
      if (overshoot == null) {
        overshoot = 1.70158;
      }
      if ((time = time / (duration / 2)) < 1) {
        return change / 2 * (time * time * (((overshoot *= 1.525) + 1) * time - overshoot)) + begin;
      } else {
        return change / 2 * ((time -= 2) * time * (((overshoot *= 1.525) + 1) * time + overshoot) + 2) + begin;
      }
    };

    JTCurve.accel = function(time, begin, change, duration) {
      var a;
      a = 4;
      if ((time = time / duration) < 0.5) {
        return (0.5 * a * time * time) + begin;
      } else {
        time -= 0.5;
        return (0.5 * (-a) * time * time) + (a * 0.5 * time) + 0.5 + begin;
      }
    };

    JTCurve.damp = function(time, begin, change, duration) {
      var l1, l2;
      time = time * 1.0 / duration * 4;
      l1 = -3;
      l2 = 3;
      return change - (Math.exp(l1 * time) * Math.cos(l2 * time) + 1.48 * Math.exp(l1 * time) * Math.sin(l2 * time)) + begin;
    };

    JTCurve.damp2 = function(time, begin, change, duration) {
      var l1, l2;
      time = time * 1.0 / duration * 4;
      l1 = -3;
      l2 = 3;
      return change - (Math.exp(l1 * time) * Math.cos(l2 * time) + 1.48 * Math.exp(l1 * time) * Math.sin(l2 * time)) + begin;
    };

    return JTCurve;

  })();

  window.JTCurve = JTCurve;

  window.JTSVG = JTSVG;

  window.JTSmoothSurface = JTSmoothSurface;

}).call(this);
